
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000766  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800200  00800200  000007da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8c  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004cb  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd4  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  000024c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000323  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b5  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c2       	rjmp	.+1128   	; 0x4be <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 33       	cpi	r26, 0x39	; 57
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	7c d2       	rcall	.+1272   	; 0x5fe <main>
 106:	2d c3       	rjmp	.+1626   	; 0x762 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <x_yield>:
		.global x_yield
x_yield:
//------------------------------------------------------------------
// Save "callee-save" registers
//------------------------------------------------------------------
		push	r28
 10a:	cf 93       	push	r28
		push	r29
 10c:	df 93       	push	r29
		push	r2
 10e:	2f 92       	push	r2
		push	r3
 110:	3f 92       	push	r3
		push	r4
 112:	4f 92       	push	r4
		push	r5
 114:	5f 92       	push	r5
		push	r6
 116:	6f 92       	push	r6
		push	r7
 118:	7f 92       	push	r7
		push	r8
 11a:	8f 92       	push	r8
		push	r9
 11c:	9f 92       	push	r9
		push	r10
 11e:	af 92       	push	r10
		push	r11
 120:	bf 92       	push	r11
		push	r12
 122:	cf 92       	push	r12
		push	r13
 124:	df 92       	push	r13
		push	r14
 126:	ef 92       	push	r14
		push	r15
 128:	ff 92       	push	r15
		push	r16
 12a:	0f 93       	push	r16
		push	r17
 12c:	1f 93       	push	r17

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------

		lds	r20,	x_thread_id
 12e:	40 91 00 02 	lds	r20, 0x0200
		lds	r21,	x_thread_mask
 132:	50 91 38 02 	lds	r21, 0x0238

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 136:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 138:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 13a:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 13c:	e8 e1       	ldi	r30, 0x18	; 24
		ldi r31,	hi8(stacks)	;load the other byte
 13e:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 140:	e6 0f       	add	r30, r22
		;adc r31,	0			;pull in the carry from previous, if any
		
		;write the SP into the stack save area
		lds	r16,	(0x5d)		;Load SP low byte
 142:	00 91 5d 00 	lds	r16, 0x005D
		st	Z,		r16			;save SP low byte
 146:	00 83       	st	Z, r16
		lds r16,	(0x5e)		;Load SP high byte
 148:	00 91 5e 00 	lds	r16, 0x005E
		std	Z+1,	r16			;save SP high byte
 14c:	01 83       	std	Z+1, r16	; 0x01

0000014e <x_schedule>:
;                         if entered from x_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds r18,	disables	;load the disabled status
 14e:	20 91 01 02 	lds	r18, 0x0201
		lds r19,	suspends	;load the suspended status
 152:	30 91 03 02 	lds	r19, 0x0203
		or	r18,	r19			;or disables and suspends
 156:	23 2b       	or	r18, r19
		lds r19,	delays		;load the delayed status
 158:	30 91 02 02 	lds	r19, 0x0202
		or	r18,	r19			;or disables, suspends, and delays
 15c:	23 2b       	or	r18, r19

		lds	r20,	x_thread_id	;load the id of the current thread
 15e:	40 91 00 02 	lds	r20, 0x0200
		lds r21,	x_thread_mask	;load the thread id mask
 162:	50 91 38 02 	lds	r21, 0x0238

		ldi	r23,	0			;load loop counter
 166:	70 e0       	ldi	r23, 0x00	; 0

00000168 <loop>:

;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
loop:
		cpi	r23,	8			;compare loop counter to 7
 168:	78 30       	cpi	r23, 0x08	; 8
		breq x_schedule			;if equal, restart scheduling
 16a:	89 f3       	breq	.-30     	; 0x14e <x_schedule>
		inc	r20					;increment thread id
 16c:	43 95       	inc	r20
		lsl r21					;rotate thread mask left
 16e:	55 0f       	add	r21, r21
		cpi	r21,	0			;check if thread mask is zero
 170:	50 30       	cpi	r21, 0x00	; 0
		brne skip				;jump over second rotate
 172:	11 f4       	brne	.+4      	; 0x178 <skip>
		inc r21					;reset the thread mask to one
 174:	53 95       	inc	r21
		ldi	r20,	0			;reset thread id to zero
 176:	40 e0       	ldi	r20, 0x00	; 0

00000178 <skip>:
skip:	
		mov r22,	r21			;copy the thread mask
 178:	65 2f       	mov	r22, r21
		and	r22,	r18			;compare thread mask to or-ed statuses
 17a:	62 23       	and	r22, r18
		inc r23					;increment loop counter
 17c:	73 95       	inc	r23
		cpi r22,	0			;if the result is zero, this next thread is ready
 17e:	60 30       	cpi	r22, 0x00	; 0
		brne loop				;else restart the loop
 180:	99 f7       	brne	.-26     	; 0x168 <loop>

		jmp	restore				;skip the nap code
 182:	01 c0       	rjmp	.+2      	; 0x186 <restore>

00000184 <nap>:
;----------------------------------------------------------
nap:
		; add sleep instructions here...
		;sleep
		;TODO: uncomment & implement
		rjmp	x_schedule			
 184:	e4 cf       	rjmp	.-56     	; 0x14e <x_schedule>

00000186 <restore>:
restore:
		;r20 holds thread id
		;r21 holds thread mask

		;set the thread id
		sts x_thread_id,	r20
 186:	40 93 00 02 	sts	0x0200, r20
		;set the thread mask
		sts x_thread_mask, r21
 18a:	50 93 38 02 	sts	0x0238, r21

		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 18e:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 190:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 192:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 194:	e8 e1       	ldi	r30, 0x18	; 24
		ldi r31,	hi8(stacks)	;load the other byte
 196:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 198:	e6 0f       	add	r30, r22
		;adc r31,	0			;pull in the carry from previous, if any
		
		// update hardware SP
		ld	r23,	Z+			;load new thread's low SP byte
 19a:	71 91       	ld	r23, Z+
		ld	r24,	Z			;load new thread's high SP byte
 19c:	80 81       	ld	r24, Z
		sts	(0x5d),	r23			;change lower SP byte
 19e:	70 93 5d 00 	sts	0x005D, r23
		sts (0x5e),	r24			;change upper SP byte
 1a2:	80 93 5e 00 	sts	0x005E, r24

		// Restore registers
		pop	r17
 1a6:	1f 91       	pop	r17
		pop	r16
 1a8:	0f 91       	pop	r16
		pop	r15
 1aa:	ff 90       	pop	r15
		pop	r14
 1ac:	ef 90       	pop	r14
		pop	r13
 1ae:	df 90       	pop	r13
		pop	r12
 1b0:	cf 90       	pop	r12
		pop	r11
 1b2:	bf 90       	pop	r11
		pop	r10
 1b4:	af 90       	pop	r10
		pop	r9
 1b6:	9f 90       	pop	r9
		pop	r8
 1b8:	8f 90       	pop	r8
		pop	r7
 1ba:	7f 90       	pop	r7
		pop	r6
 1bc:	6f 90       	pop	r6
		pop	r5
 1be:	5f 90       	pop	r5
		pop	r4
 1c0:	4f 90       	pop	r4
		pop	r3
 1c2:	3f 90       	pop	r3
		pop	r2
 1c4:	2f 90       	pop	r2
		pop	r29
 1c6:	df 91       	pop	r29
		pop	r28
 1c8:	cf 91       	pop	r28

		// Return to next thread
		ret
 1ca:	08 95       	ret

000001cc <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
 1cc:	68 2f       	mov	r22, r24
		or  r22,r25
 1ce:	69 2b       	or	r22, r25
		nop
 1d0:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
 1d4:	05 d0       	rcall	.+10     	; 0x1e0 <delay_usec+0x14>
		rjmp	3f      // 2 cycles
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <delay_usec+0xc>
3:	
		nop		// 1 cycle
 1d8:	00 00       	nop
		sbiw	r24,1   // 2 cycles
 1da:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
 1de:	00 00       	nop
1:
 1e0:	08 95       	ret

000001e2 <x_init>:
/*
 * Initializes kernel data structures, sets stack pointer
 * to Thread0 stack area returns to caller. The calling
 * function becomes Thread0.
 */
void x_init() {
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
	//initialize stacks
	stacks[0].pHead = (byte *)TH0_START;
 1e6:	e8 e1       	ldi	r30, 0x18	; 24
 1e8:	f2 e0       	ldi	r31, 0x02	; 2
 1ea:	8f e7       	ldi	r24, 0x7F	; 127
 1ec:	91 e2       	ldi	r25, 0x21	; 33
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	80 83       	st	Z, r24
	stacks[0].pBase = (byte *)TH0_START;
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
	stacks[1].pHead = (byte *)TH1_START;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	90 e2       	ldi	r25, 0x20	; 32
 1fa:	95 83       	std	Z+5, r25	; 0x05
 1fc:	84 83       	std	Z+4, r24	; 0x04
	stacks[1].pBase = (byte *)TH1_START;
 1fe:	97 83       	std	Z+7, r25	; 0x07
 200:	86 83       	std	Z+6, r24	; 0x06
	stacks[2].pHead = (byte *)TH2_START;
 202:	8f e7       	ldi	r24, 0x7F	; 127
 204:	90 e2       	ldi	r25, 0x20	; 32
 206:	91 87       	std	Z+9, r25	; 0x09
 208:	80 87       	std	Z+8, r24	; 0x08
	stacks[2].pBase = (byte *)TH2_START;
 20a:	93 87       	std	Z+11, r25	; 0x0b
 20c:	82 87       	std	Z+10, r24	; 0x0a
	stacks[3].pHead = (byte *)TH3_START;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	9f e1       	ldi	r25, 0x1F	; 31
 212:	95 87       	std	Z+13, r25	; 0x0d
 214:	84 87       	std	Z+12, r24	; 0x0c
	stacks[3].pBase = (byte *)TH3_START;
 216:	97 87       	std	Z+15, r25	; 0x0f
 218:	86 87       	std	Z+14, r24	; 0x0e
	stacks[4].pHead = (byte *)TH4_START;
 21a:	8f e7       	ldi	r24, 0x7F	; 127
 21c:	9f e1       	ldi	r25, 0x1F	; 31
 21e:	91 8b       	std	Z+17, r25	; 0x11
 220:	80 8b       	std	Z+16, r24	; 0x10
	stacks[4].pBase = (byte *)TH4_START;
 222:	93 8b       	std	Z+19, r25	; 0x13
 224:	82 8b       	std	Z+18, r24	; 0x12
	stacks[5].pHead = (byte *)TH5_START;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9e e1       	ldi	r25, 0x1E	; 30
 22a:	95 8b       	std	Z+21, r25	; 0x15
 22c:	84 8b       	std	Z+20, r24	; 0x14
	stacks[5].pBase = (byte *)TH5_START;
 22e:	97 8b       	std	Z+23, r25	; 0x17
 230:	86 8b       	std	Z+22, r24	; 0x16
	stacks[6].pHead = (byte *)TH6_START;
 232:	8f e7       	ldi	r24, 0x7F	; 127
 234:	9e e1       	ldi	r25, 0x1E	; 30
 236:	91 8f       	std	Z+25, r25	; 0x19
 238:	80 8f       	std	Z+24, r24	; 0x18
	stacks[6].pBase = (byte *)TH6_START;
 23a:	93 8f       	std	Z+27, r25	; 0x1b
 23c:	82 8f       	std	Z+26, r24	; 0x1a
	stacks[7].pHead = (byte *)TH7_START;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	9d e1       	ldi	r25, 0x1D	; 29
 242:	95 8f       	std	Z+29, r25	; 0x1d
 244:	84 8f       	std	Z+28, r24	; 0x1c
	stacks[7].pBase = (byte *)TH7_START;
 246:	97 8f       	std	Z+31, r25	; 0x1f
 248:	86 8f       	std	Z+30, r24	; 0x1e

	//initialize canaries
	byte * curr_canary = (byte *)TH0_CANARY;
	*curr_canary = CANARY_VALUE;
 24a:	8a ea       	ldi	r24, 0xAA	; 170
 24c:	80 93 00 21 	sts	0x2100, r24
	curr_canary = (byte *)TH1_CANARY;
	*curr_canary = CANARY_VALUE;
 250:	80 93 80 20 	sts	0x2080, r24
	curr_canary = (byte *)TH2_CANARY;
	*curr_canary = CANARY_VALUE;
 254:	80 93 00 20 	sts	0x2000, r24
	curr_canary = (byte *)TH3_CANARY;
	*curr_canary = CANARY_VALUE;
 258:	80 93 80 1f 	sts	0x1F80, r24
	curr_canary = (byte *)TH4_CANARY;
	*curr_canary = CANARY_VALUE;
 25c:	80 93 00 1f 	sts	0x1F00, r24
	curr_canary = (byte *)TH5_CANARY;
	*curr_canary = CANARY_VALUE;
 260:	80 93 80 1e 	sts	0x1E80, r24
	curr_canary = (byte *)TH6_CANARY;
	*curr_canary = CANARY_VALUE;
 264:	80 93 00 1e 	sts	0x1E00, r24
	curr_canary = (byte *)TH7_CANARY;
	*curr_canary = CANARY_VALUE;
 268:	80 93 80 1d 	sts	0x1D80, r24

	//initialize counter
	ticks = 0;
 26c:	10 92 14 02 	sts	0x0214, r1
 270:	10 92 15 02 	sts	0x0215, r1
 274:	10 92 16 02 	sts	0x0216, r1
 278:	10 92 17 02 	sts	0x0217, r1

	//Initialize Delays
	x_thread_delay[0] = 0;
 27c:	e4 e0       	ldi	r30, 0x04	; 4
 27e:	f2 e0       	ldi	r31, 0x02	; 2
 280:	11 82       	std	Z+1, r1	; 0x01
 282:	10 82       	st	Z, r1
	x_thread_delay[1] = 0;
 284:	13 82       	std	Z+3, r1	; 0x03
 286:	12 82       	std	Z+2, r1	; 0x02
	x_thread_delay[2] = 0;
 288:	15 82       	std	Z+5, r1	; 0x05
 28a:	14 82       	std	Z+4, r1	; 0x04
	x_thread_delay[3] = 0;
 28c:	17 82       	std	Z+7, r1	; 0x07
 28e:	16 82       	std	Z+6, r1	; 0x06
	x_thread_delay[4] = 0;
 290:	11 86       	std	Z+9, r1	; 0x09
 292:	10 86       	std	Z+8, r1	; 0x08
	x_thread_delay[5] = 0;
 294:	13 86       	std	Z+11, r1	; 0x0b
 296:	12 86       	std	Z+10, r1	; 0x0a
	x_thread_delay[6] = 0;
 298:	15 86       	std	Z+13, r1	; 0x0d
 29a:	14 86       	std	Z+12, r1	; 0x0c
	x_thread_delay[7] = 0;
 29c:	17 86       	std	Z+15, r1	; 0x0f
 29e:	16 86       	std	Z+14, r1	; 0x0e

	//Disable all but thread 0
	disables = 0xFE;
 2a0:	8e ef       	ldi	r24, 0xFE	; 254
 2a2:	80 93 01 02 	sts	0x0201, r24

	//Set initial statuses
	delays = 0;
 2a6:	10 92 02 02 	sts	0x0202, r1
	suspends = 0;
 2aa:	10 92 03 02 	sts	0x0203, r1

	//Configure this to return as thread 0
	x_thread_id = 0;
 2ae:	10 92 00 02 	sts	0x0200, r1
	x_thread_mask = 0x01;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 38 02 	sts	0x0238, r24

	//initialize delay timer settings
	TCCR0A = 0x02; // CTC mode
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	84 bd       	out	0x24, r24	; 36
	OCR0A = 250; //match at 250 (1 msec)
 2bc:	9a ef       	ldi	r25, 0xFA	; 250
 2be:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02; //enable compare-match A interrupt
 2c0:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = 0x03; //enable global interrupts
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	85 bd       	out	0x25, r24	; 37

	//Change the stack location to Thread 0's space
	int i = 0;
	byte * newStack = TH0_START;
	//iterate across the old stack and copy all values
	for (; STACK_START-i >= SP; i++) {
 2c8:	8d b7       	in	r24, 0x3d	; 61
 2ca:	9e b7       	in	r25, 0x3e	; 62
 2cc:	81 15       	cp	r24, r1
 2ce:	92 42       	sbci	r25, 0x22	; 34
 2d0:	b0 f4       	brcc	.+44     	; 0x2fe <x_init+0x11c>
 2d2:	a0 e8       	ldi	r26, 0x80	; 128
 2d4:	b1 e2       	ldi	r27, 0x21	; 33
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	92 e2       	ldi	r25, 0x22	; 34
 2da:	c1 e0       	ldi	r28, 0x01	; 1
 2dc:	d2 e2       	ldi	r29, 0x22	; 34
 2de:	fc 01       	movw	r30, r24
		*(newStack-i) = *((byte *)STACK_START-i);
 2e0:	22 91       	ld	r18, -Z
 2e2:	2e 93       	st	-X, r18
 2e4:	be 01       	movw	r22, r28
 2e6:	68 1b       	sub	r22, r24
 2e8:	79 0b       	sbc	r23, r25
 2ea:	9c 01       	movw	r18, r24
 2ec:	22 50       	subi	r18, 0x02	; 2
 2ee:	31 09       	sbc	r19, r1

	//Change the stack location to Thread 0's space
	int i = 0;
	byte * newStack = TH0_START;
	//iterate across the old stack and copy all values
	for (; STACK_START-i >= SP; i++) {
 2f0:	4d b7       	in	r20, 0x3d	; 61
 2f2:	5e b7       	in	r21, 0x3e	; 62
 2f4:	cf 01       	movw	r24, r30
 2f6:	24 17       	cp	r18, r20
 2f8:	35 07       	cpc	r19, r21
 2fa:	88 f7       	brcc	.-30     	; 0x2de <x_init+0xfc>
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <x_init+0x120>
	TIMSK0 = 0x02; //enable compare-match A interrupt
	TCCR0B = 0x03; //enable global interrupts


	//Change the stack location to Thread 0's space
	int i = 0;
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
	for (; STACK_START-i >= SP; i++) {
		*(newStack-i) = *((byte *)STACK_START-i);
	}
	
	//disable interrupts
	cli();
 302:	f8 94       	cli
	//Set new stack pointer. +1 compensates for final
	//increment of i.
	SP = (int)TH0_START-i+1;
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	91 e2       	ldi	r25, 0x21	; 33
 308:	86 1b       	sub	r24, r22
 30a:	97 0b       	sbc	r25, r23
 30c:	9e bf       	out	0x3e, r25	; 62
 30e:	8d bf       	out	0x3d, r24	; 61
	//set global interrupt enable
	sei();
 310:	78 94       	sei
	return;
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <x_new>:
 * thread is replaced and rescheduling takes place.
 *
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17

	byte low = (byte) (((int) pthread) & 0xff);
 31c:	06 2f       	mov	r16, r22
 31e:	17 2f       	mov	r17, r23
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
	*(stacks[tid].pHead) = low;//lowbyte address
 320:	e8 2f       	mov	r30, r24
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ee 0f       	add	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	e8 5e       	subi	r30, 0xE8	; 232
 32e:	fd 4f       	sbci	r31, 0xFD	; 253
 330:	a0 81       	ld	r26, Z
 332:	b1 81       	ldd	r27, Z+1	; 0x01
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {

	byte low = (byte) (((int) pthread) & 0xff);
 334:	6c 93       	st	X, r22
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
	*(stacks[tid].pHead) = low;//lowbyte address
	stacks[tid].pHead -= 1;
 336:	a0 81       	ld	r26, Z
 338:	b1 81       	ldd	r27, Z+1	; 0x01
 33a:	11 97       	sbiw	r26, 0x01	; 1
 33c:	b1 83       	std	Z+1, r27	; 0x01
 33e:	a0 83       	st	Z, r26
 * interrupt handler.
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {

	byte low = (byte) (((int) pthread) & 0xff);
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
 340:	7c 93       	st	X, r23
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
	*(stacks[tid].pHead) = low;//lowbyte address
	stacks[tid].pHead -= 1;
	*(stacks[tid].pHead) = mid;//midbyte address
	stacks[tid].pHead -= 1;
 342:	a0 81       	ld	r26, Z
 344:	b1 81       	ldd	r27, Z+1	; 0x01
 346:	11 97       	sbiw	r26, 0x01	; 1
 348:	b1 83       	std	Z+1, r27	; 0x01
 34a:	a0 83       	st	Z, r26
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {

	byte low = (byte) (((int) pthread) & 0xff);
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
 34c:	01 2e       	mov	r0, r17
 34e:	00 0c       	add	r0, r0
 350:	22 0b       	sbc	r18, r18
 352:	33 0b       	sbc	r19, r19
 354:	3c 93       	st	X, r19
	*(stacks[tid].pHead) = low;//lowbyte address
	stacks[tid].pHead -= 1;
	*(stacks[tid].pHead) = mid;//midbyte address
	stacks[tid].pHead -= 1;
	*(stacks[tid].pHead) = high;//highbyte address
	stacks[tid].pHead -= 1;
 356:	a0 81       	ld	r26, Z
 358:	b1 81       	ldd	r27, Z+1	; 0x01

	//save register values
	stacks[tid].pHead -= 1;
 35a:	12 97       	sbiw	r26, 0x02	; 2
 35c:	b1 83       	std	Z+1, r27	; 0x01
 35e:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 28;
 360:	9c e1       	ldi	r25, 0x1C	; 28
 362:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 364:	a0 81       	ld	r26, Z
 366:	b1 81       	ldd	r27, Z+1	; 0x01
 368:	11 97       	sbiw	r26, 0x01	; 1
 36a:	b1 83       	std	Z+1, r27	; 0x01
 36c:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 29;
 36e:	9d e1       	ldi	r25, 0x1D	; 29
 370:	9c 93       	st	X, r25
	*(stacks[tid].pHead) = 2;
 372:	a0 81       	ld	r26, Z
 374:	b1 81       	ldd	r27, Z+1	; 0x01
 376:	92 e0       	ldi	r25, 0x02	; 2
 378:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 37a:	a0 81       	ld	r26, Z
 37c:	b1 81       	ldd	r27, Z+1	; 0x01
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	b1 83       	std	Z+1, r27	; 0x01
 382:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 3;
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 388:	a0 81       	ld	r26, Z
 38a:	b1 81       	ldd	r27, Z+1	; 0x01
 38c:	11 97       	sbiw	r26, 0x01	; 1
 38e:	b1 83       	std	Z+1, r27	; 0x01
 390:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 4;
 392:	94 e0       	ldi	r25, 0x04	; 4
 394:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 396:	a0 81       	ld	r26, Z
 398:	b1 81       	ldd	r27, Z+1	; 0x01
 39a:	11 97       	sbiw	r26, 0x01	; 1
 39c:	b1 83       	std	Z+1, r27	; 0x01
 39e:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 5;
 3a0:	95 e0       	ldi	r25, 0x05	; 5
 3a2:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3a4:	a0 81       	ld	r26, Z
 3a6:	b1 81       	ldd	r27, Z+1	; 0x01
 3a8:	11 97       	sbiw	r26, 0x01	; 1
 3aa:	b1 83       	std	Z+1, r27	; 0x01
 3ac:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 6;
 3ae:	96 e0       	ldi	r25, 0x06	; 6
 3b0:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3b2:	a0 81       	ld	r26, Z
 3b4:	b1 81       	ldd	r27, Z+1	; 0x01
 3b6:	11 97       	sbiw	r26, 0x01	; 1
 3b8:	b1 83       	std	Z+1, r27	; 0x01
 3ba:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 7;
 3bc:	97 e0       	ldi	r25, 0x07	; 7
 3be:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3c0:	a0 81       	ld	r26, Z
 3c2:	b1 81       	ldd	r27, Z+1	; 0x01
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	b1 83       	std	Z+1, r27	; 0x01
 3c8:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 8;
 3ca:	98 e0       	ldi	r25, 0x08	; 8
 3cc:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3ce:	a0 81       	ld	r26, Z
 3d0:	b1 81       	ldd	r27, Z+1	; 0x01
 3d2:	11 97       	sbiw	r26, 0x01	; 1
 3d4:	b1 83       	std	Z+1, r27	; 0x01
 3d6:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 9;
 3d8:	99 e0       	ldi	r25, 0x09	; 9
 3da:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3dc:	a0 81       	ld	r26, Z
 3de:	b1 81       	ldd	r27, Z+1	; 0x01
 3e0:	11 97       	sbiw	r26, 0x01	; 1
 3e2:	b1 83       	std	Z+1, r27	; 0x01
 3e4:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 10;
 3e6:	9a e0       	ldi	r25, 0x0A	; 10
 3e8:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3ea:	a0 81       	ld	r26, Z
 3ec:	b1 81       	ldd	r27, Z+1	; 0x01
 3ee:	11 97       	sbiw	r26, 0x01	; 1
 3f0:	b1 83       	std	Z+1, r27	; 0x01
 3f2:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 11;
 3f4:	9b e0       	ldi	r25, 0x0B	; 11
 3f6:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3f8:	a0 81       	ld	r26, Z
 3fa:	b1 81       	ldd	r27, Z+1	; 0x01
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	b1 83       	std	Z+1, r27	; 0x01
 400:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 12;
 402:	9c e0       	ldi	r25, 0x0C	; 12
 404:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 406:	a0 81       	ld	r26, Z
 408:	b1 81       	ldd	r27, Z+1	; 0x01
 40a:	11 97       	sbiw	r26, 0x01	; 1
 40c:	b1 83       	std	Z+1, r27	; 0x01
 40e:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 13;
 410:	9d e0       	ldi	r25, 0x0D	; 13
 412:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 414:	a0 81       	ld	r26, Z
 416:	b1 81       	ldd	r27, Z+1	; 0x01
 418:	11 97       	sbiw	r26, 0x01	; 1
 41a:	b1 83       	std	Z+1, r27	; 0x01
 41c:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 14;
 41e:	9e e0       	ldi	r25, 0x0E	; 14
 420:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 422:	a0 81       	ld	r26, Z
 424:	b1 81       	ldd	r27, Z+1	; 0x01
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	b1 83       	std	Z+1, r27	; 0x01
 42a:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 15;
 42c:	9f e0       	ldi	r25, 0x0F	; 15
 42e:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 430:	a0 81       	ld	r26, Z
 432:	b1 81       	ldd	r27, Z+1	; 0x01
 434:	11 97       	sbiw	r26, 0x01	; 1
 436:	b1 83       	std	Z+1, r27	; 0x01
 438:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 16;
 43a:	90 e1       	ldi	r25, 0x10	; 16
 43c:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 43e:	a0 81       	ld	r26, Z
 440:	b1 81       	ldd	r27, Z+1	; 0x01
 442:	11 97       	sbiw	r26, 0x01	; 1
 444:	b1 83       	std	Z+1, r27	; 0x01
 446:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 17;
 448:	91 e1       	ldi	r25, 0x11	; 17
 44a:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 44c:	20 81       	ld	r18, Z
 44e:	31 81       	ldd	r19, Z+1	; 0x01
 450:	21 50       	subi	r18, 0x01	; 1
 452:	31 09       	sbc	r19, r1
 454:	31 83       	std	Z+1, r19	; 0x01
 456:	20 83       	st	Z, r18


	//create a bytemask to enable/disable a thread
	byte mask = 1;
	mask = mask << tid;
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	08 2e       	mov	r0, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <x_new+0x14c>
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <x_new+0x148>

	if (isEnabled) {
 468:	44 23       	and	r20, r20
 46a:	39 f0       	breq	.+14     	; 0x47a <x_new+0x162>
	//Enable the thread
		disables &= (~mask);
 46c:	20 95       	com	r18
 46e:	90 91 01 02 	lds	r25, 0x0201
 472:	29 23       	and	r18, r25
 474:	20 93 01 02 	sts	0x0201, r18
 478:	05 c0       	rjmp	.+10     	; 0x484 <x_new+0x16c>
	} else {
		//disable the thread
		disables |= mask;
 47a:	90 91 01 02 	lds	r25, 0x0201
 47e:	29 2b       	or	r18, r25
 480:	20 93 01 02 	sts	0x0201, r18
	}
	if (tid == x_thread_id) {
 484:	90 91 00 02 	lds	r25, 0x0200
 488:	89 13       	cpse	r24, r25
 48a:	01 c0       	rjmp	.+2      	; 0x48e <x_new+0x176>
		//we've just overwritten the current thread, so reschedule
		x_schedule();
 48c:	60 de       	rcall	.-832    	; 0x14e <x_schedule>
	}
}
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <x_delay>:
 * tick frequency, set at system initialization.
 *
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_delay(int ticks) {
 494:	9c 01       	movw	r18, r24
	//disable this thread
	delays |= x_thread_mask;
 496:	80 91 02 02 	lds	r24, 0x0202
 49a:	90 91 38 02 	lds	r25, 0x0238
 49e:	98 2b       	or	r25, r24
 4a0:	90 93 02 02 	sts	0x0202, r25
	cli(); //disable interrupts
 4a4:	f8 94       	cli
	x_thread_delay[x_thread_id] = ticks;
 4a6:	e0 91 00 02 	lds	r30, 0x0200
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ec 5f       	subi	r30, 0xFC	; 252
 4b2:	fd 4f       	sbci	r31, 0xFD	; 253
 4b4:	31 83       	std	Z+1, r19	; 0x01
 4b6:	20 83       	st	Z, r18
	sei(); //enable interrupts
 4b8:	78 94       	sei
	x_yield(); //reschedule
 4ba:	27 ce       	rjmp	.-946    	; 0x10a <x_yield>
 4bc:	08 95       	ret

000004be <__vector_21>:
/*
 * The interrupt service routine for timer0.
 * Decrements delays for all threads and enables threads
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	0b b6       	in	r0, 0x3b	; 59
 4ca:	0f 92       	push	r0
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	8f 93       	push	r24
 4d8:	9f 93       	push	r25
 4da:	af 93       	push	r26
 4dc:	bf 93       	push	r27
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
 4e2:	60 91 02 02 	lds	r22, 0x0202
	int i = 0;
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
			x_thread_delay[i]--;
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
			//enable this thread
			delays &= ~(0x1 << i);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 */
ISR(TIMER0_COMPA_vect){
	int i = 0;
	for (; i < NUM_THREADS; i++) {
		//if the count is nonzero
		if (x_thread_delay[i] > 0) {
 4ee:	fc 01       	movw	r30, r24
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	ec 5f       	subi	r30, 0xFC	; 252
 4f6:	fd 4f       	sbci	r31, 0xFD	; 253
 4f8:	20 81       	ld	r18, Z
 4fa:	31 81       	ldd	r19, Z+1	; 0x01
 4fc:	23 2b       	or	r18, r19
 4fe:	59 f0       	breq	.+22     	; 0x516 <__vector_21+0x58>
			//decrement the count
			x_thread_delay[i]--;
 500:	fc 01       	movw	r30, r24
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	ec 5f       	subi	r30, 0xFC	; 252
 508:	fd 4f       	sbci	r31, 0xFD	; 253
 50a:	20 81       	ld	r18, Z
 50c:	31 81       	ldd	r19, Z+1	; 0x01
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	31 09       	sbc	r19, r1
 512:	31 83       	std	Z+1, r19	; 0x01
 514:	20 83       	st	Z, r18
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
 516:	fc 01       	movw	r30, r24
 518:	ee 0f       	add	r30, r30
 51a:	ff 1f       	adc	r31, r31
 51c:	ec 5f       	subi	r30, 0xFC	; 252
 51e:	fd 4f       	sbci	r31, 0xFD	; 253
 520:	20 81       	ld	r18, Z
 522:	31 81       	ldd	r19, Z+1	; 0x01
 524:	23 2b       	or	r18, r19
 526:	49 f4       	brne	.+18     	; 0x53a <__vector_21+0x7c>
			//enable this thread
			delays &= ~(0x1 << i);
 528:	9a 01       	movw	r18, r20
 52a:	08 2e       	mov	r0, r24
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__vector_21+0x74>
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <__vector_21+0x70>
 536:	20 95       	com	r18
 538:	62 23       	and	r22, r18
 * Decrements delays for all threads and enables threads
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
	int i = 0;
	for (; i < NUM_THREADS; i++) {
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	88 30       	cpi	r24, 0x08	; 8
 53e:	91 05       	cpc	r25, r1
 540:	b1 f6       	brne	.-84     	; 0x4ee <__vector_21+0x30>
 542:	60 93 02 02 	sts	0x0202, r22
		if (x_thread_delay[i] == 0) {
			//enable this thread
			delays &= ~(0x1 << i);
		}
	}
	ticks++;
 546:	80 91 14 02 	lds	r24, 0x0214
 54a:	90 91 15 02 	lds	r25, 0x0215
 54e:	a0 91 16 02 	lds	r26, 0x0216
 552:	b0 91 17 02 	lds	r27, 0x0217
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	a1 1d       	adc	r26, r1
 55a:	b1 1d       	adc	r27, r1
 55c:	80 93 14 02 	sts	0x0214, r24
 560:	90 93 15 02 	sts	0x0215, r25
 564:	a0 93 16 02 	sts	0x0216, r26
 568:	b0 93 17 02 	sts	0x0217, r27
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	0f 90       	pop	r0
 584:	0b be       	out	0x3b, r0	; 59
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <ow_reset>:
	DDRE &= ~(1 << PE4); //set for input
	
	delay_usec(14); //wait 15us
	
	return(PINE & (1 << PE4));
}
 590:	cf 93       	push	r28
 592:	6c 9a       	sbi	0x0d, 4	; 13
 594:	74 98       	cbi	0x0e, 4	; 14
 596:	8f ed       	ldi	r24, 0xDF	; 223
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	18 de       	rcall	.-976    	; 0x1cc <delay_usec>
 59c:	74 9a       	sbi	0x0e, 4	; 14
 59e:	6c 98       	cbi	0x0d, 4	; 13
 5a0:	85 e4       	ldi	r24, 0x45	; 69
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	13 de       	rcall	.-986    	; 0x1cc <delay_usec>
 5a6:	cc b1       	in	r28, 0x0c	; 12
 5a8:	85 ee       	ldi	r24, 0xE5	; 229
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0f de       	rcall	.-994    	; 0x1cc <delay_usec>
 5ae:	c2 95       	swap	r28
 5b0:	c1 70       	andi	r28, 0x01	; 1
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	8c 27       	eor	r24, r28
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
 5ba:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
 5bc:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
 5c2:	74 9a       	sbi	0x0e, 4	; 14
	}
	
	delay_usec(103); //wait 104us
 5c4:	87 e6       	ldi	r24, 0x67	; 103
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	01 de       	rcall	.-1022   	; 0x1cc <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
 5ca:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
 5cc:	6c 98       	cbi	0x0d, 4	; 13
 5ce:	08 95       	ret

000005d0 <sensor_test>:
	while(1) {
		//serial_write('x');
		//x_delay(1000);
		c = serial_read();
		serial_write(c);
	}
 5d0:	df df       	rcall	.-66     	; 0x590 <ow_reset>
 5d2:	46 e0       	ldi	r20, 0x06	; 6
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	7b e4       	ldi	r23, 0x4B	; 75
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	18 d0       	rcall	.+48     	; 0x610 <serial_open>
 5e0:	d7 df       	rcall	.-82     	; 0x590 <ow_reset>
 5e2:	81 11       	cpse	r24, r1
 5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <sensor_test+0x22>
 5e6:	88 ee       	ldi	r24, 0xE8	; 232
 5e8:	93 e0       	ldi	r25, 0x03	; 3
 5ea:	54 df       	rcall	.-344    	; 0x494 <x_delay>
 5ec:	d1 df       	rcall	.-94     	; 0x590 <ow_reset>
 5ee:	88 23       	and	r24, r24
 5f0:	d1 f3       	breq	.-12     	; 0x5e6 <sensor_test+0x16>
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	e2 df       	rcall	.-60     	; 0x5ba <write_bit>
 5f6:	88 ee       	ldi	r24, 0xE8	; 232
 5f8:	93 e0       	ldi	r25, 0x03	; 3
 5fa:	4c df       	rcall	.-360    	; 0x494 <x_delay>
 5fc:	fa cf       	rjmp	.-12     	; 0x5f2 <sensor_test+0x22>

000005fe <main>:
	}
}

int main(void)
{
	x_init();
 5fe:	f1 dd       	rcall	.-1054   	; 0x1e2 <x_init>
	//x_new(1, red, 1);
	x_new(0, sensor_test, 1);
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	68 ee       	ldi	r22, 0xE8	; 232
 604:	72 e0       	ldi	r23, 0x02	; 2
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	87 de       	rcall	.-754    	; 0x318 <x_new>
}
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	08 95       	ret

00000610 <serial_open>:
 * Set the serial port to listen at a given speed with a given configuration
 * (use the ones defined in serial.h).
 */
void serial_open(long speed, int config) {
	//disable interrupts during config
	cli();
 610:	f8 94       	cli
	
	//set the configuration
	UCSR0C = config;
 612:	40 93 c2 00 	sts	0x00C2, r20
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 616:	28 e1       	ldi	r18, 0x18	; 24
 618:	20 93 c1 00 	sts	0x00C1, r18
	
	//U2X0 = 1 seems to have universally lower errors
	UCSR0A |= (1<<U2X0);
 61c:	e0 ec       	ldi	r30, 0xC0	; 192
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	20 81       	ld	r18, Z
 622:	22 60       	ori	r18, 0x02	; 2
 624:	20 83       	st	Z, r18
	
	//figure out correct UBRR0 value for baud rate
	long ubrr;
	switch(speed) {
 626:	60 38       	cpi	r22, 0x80	; 128
 628:	20 e7       	ldi	r18, 0x70	; 112
 62a:	72 07       	cpc	r23, r18
 62c:	81 05       	cpc	r24, r1
 62e:	91 05       	cpc	r25, r1
 630:	09 f4       	brne	.+2      	; 0x634 <serial_open+0x24>
 632:	5f c0       	rjmp	.+190    	; 0x6f2 <serial_open+0xe2>
 634:	0c f5       	brge	.+66     	; 0x678 <serial_open+0x68>
 636:	60 38       	cpi	r22, 0x80	; 128
 638:	25 e2       	ldi	r18, 0x25	; 37
 63a:	72 07       	cpc	r23, r18
 63c:	81 05       	cpc	r24, r1
 63e:	91 05       	cpc	r25, r1
 640:	09 f4       	brne	.+2      	; 0x644 <serial_open+0x34>
 642:	48 c0       	rjmp	.+144    	; 0x6d4 <serial_open+0xc4>
 644:	6c f4       	brge	.+26     	; 0x660 <serial_open+0x50>
 646:	60 36       	cpi	r22, 0x60	; 96
 648:	29 e0       	ldi	r18, 0x09	; 9
 64a:	72 07       	cpc	r23, r18
 64c:	81 05       	cpc	r24, r1
 64e:	91 05       	cpc	r25, r1
 650:	09 f4       	brne	.+2      	; 0x654 <serial_open+0x44>
 652:	77 c0       	rjmp	.+238    	; 0x742 <serial_open+0x132>
 654:	60 3c       	cpi	r22, 0xC0	; 192
 656:	72 41       	sbci	r23, 0x12	; 18
 658:	81 05       	cpc	r24, r1
 65a:	91 05       	cpc	r25, r1
 65c:	b1 f1       	breq	.+108    	; 0x6ca <serial_open+0xba>
 65e:	6c c0       	rjmp	.+216    	; 0x738 <serial_open+0x128>
 660:	60 34       	cpi	r22, 0x40	; 64
 662:	28 e3       	ldi	r18, 0x38	; 56
 664:	72 07       	cpc	r23, r18
 666:	81 05       	cpc	r24, r1
 668:	91 05       	cpc	r25, r1
 66a:	c9 f1       	breq	.+114    	; 0x6de <serial_open+0xce>
 66c:	61 15       	cp	r22, r1
 66e:	7b 44       	sbci	r23, 0x4B	; 75
 670:	81 05       	cpc	r24, r1
 672:	91 05       	cpc	r25, r1
 674:	c9 f1       	breq	.+114    	; 0x6e8 <serial_open+0xd8>
 676:	60 c0       	rjmp	.+192    	; 0x738 <serial_open+0x128>
 678:	61 15       	cp	r22, r1
 67a:	2c e2       	ldi	r18, 0x2C	; 44
 67c:	72 07       	cpc	r23, r18
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	82 07       	cpc	r24, r18
 682:	91 05       	cpc	r25, r1
 684:	09 f4       	brne	.+2      	; 0x688 <serial_open+0x78>
 686:	44 c0       	rjmp	.+136    	; 0x710 <serial_open+0x100>
 688:	64 f4       	brge	.+24     	; 0x6a2 <serial_open+0x92>
 68a:	61 15       	cp	r22, r1
 68c:	26 e9       	ldi	r18, 0x96	; 150
 68e:	72 07       	cpc	r23, r18
 690:	81 05       	cpc	r24, r1
 692:	91 05       	cpc	r25, r1
 694:	99 f1       	breq	.+102    	; 0x6fc <serial_open+0xec>
 696:	61 15       	cp	r22, r1
 698:	71 4e       	sbci	r23, 0xE1	; 225
 69a:	81 05       	cpc	r24, r1
 69c:	91 05       	cpc	r25, r1
 69e:	99 f1       	breq	.+102    	; 0x706 <serial_open+0xf6>
 6a0:	4b c0       	rjmp	.+150    	; 0x738 <serial_open+0x128>
 6a2:	61 15       	cp	r22, r1
 6a4:	24 e8       	ldi	r18, 0x84	; 132
 6a6:	72 07       	cpc	r23, r18
 6a8:	23 e0       	ldi	r18, 0x03	; 3
 6aa:	82 07       	cpc	r24, r18
 6ac:	91 05       	cpc	r25, r1
 6ae:	d1 f1       	breq	.+116    	; 0x724 <serial_open+0x114>
 6b0:	60 39       	cpi	r22, 0x90	; 144
 6b2:	20 ed       	ldi	r18, 0xD0	; 208
 6b4:	72 07       	cpc	r23, r18
 6b6:	23 e0       	ldi	r18, 0x03	; 3
 6b8:	82 07       	cpc	r24, r18
 6ba:	91 05       	cpc	r25, r1
 6bc:	c1 f1       	breq	.+112    	; 0x72e <serial_open+0x11e>
 6be:	61 15       	cp	r22, r1
 6c0:	72 4c       	sbci	r23, 0xC2	; 194
 6c2:	81 40       	sbci	r24, 0x01	; 1
 6c4:	91 05       	cpc	r25, r1
 6c6:	c1 f5       	brne	.+112    	; 0x738 <serial_open+0x128>
 6c8:	28 c0       	rjmp	.+80     	; 0x71a <serial_open+0x10a>
		case 2400:
			ubrr = 832;
			break;
		case 4800:
			ubrr = 416;
 6ca:	80 ea       	ldi	r24, 0xA0	; 160
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	a0 e0       	ldi	r26, 0x00	; 0
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	3b c0       	rjmp	.+118    	; 0x74a <serial_open+0x13a>
			break;
		case 9600:
			ubrr = 207;
 6d4:	8f ec       	ldi	r24, 0xCF	; 207
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	a0 e0       	ldi	r26, 0x00	; 0
 6da:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 6dc:	36 c0       	rjmp	.+108    	; 0x74a <serial_open+0x13a>
		case 14400:
			ubrr = 138;
 6de:	8a e8       	ldi	r24, 0x8A	; 138
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	a0 e0       	ldi	r26, 0x00	; 0
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 6e6:	31 c0       	rjmp	.+98     	; 0x74a <serial_open+0x13a>
		case 19200:
			ubrr = 103;
 6e8:	87 e6       	ldi	r24, 0x67	; 103
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	a0 e0       	ldi	r26, 0x00	; 0
 6ee:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 6f0:	2c c0       	rjmp	.+88     	; 0x74a <serial_open+0x13a>
		case 28800:
			ubrr = 68;
 6f2:	84 e4       	ldi	r24, 0x44	; 68
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	a0 e0       	ldi	r26, 0x00	; 0
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 6fa:	27 c0       	rjmp	.+78     	; 0x74a <serial_open+0x13a>
		case 38400:
			ubrr = 51;
 6fc:	83 e3       	ldi	r24, 0x33	; 51
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	a0 e0       	ldi	r26, 0x00	; 0
 702:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 704:	22 c0       	rjmp	.+68     	; 0x74a <serial_open+0x13a>
		case 57600:
			ubrr = 34;
 706:	82 e2       	ldi	r24, 0x22	; 34
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	a0 e0       	ldi	r26, 0x00	; 0
 70c:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 70e:	1d c0       	rjmp	.+58     	; 0x74a <serial_open+0x13a>
		case 76800:
			ubrr = 25;
 710:	89 e1       	ldi	r24, 0x19	; 25
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	a0 e0       	ldi	r26, 0x00	; 0
 716:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 718:	18 c0       	rjmp	.+48     	; 0x74a <serial_open+0x13a>
		case 115200:
			ubrr = 16;
 71a:	80 e1       	ldi	r24, 0x10	; 16
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	a0 e0       	ldi	r26, 0x00	; 0
 720:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 722:	13 c0       	rjmp	.+38     	; 0x74a <serial_open+0x13a>
		case 230400:
			ubrr = 8;
 724:	88 e0       	ldi	r24, 0x08	; 8
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	a0 e0       	ldi	r26, 0x00	; 0
 72a:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 72c:	0e c0       	rjmp	.+28     	; 0x74a <serial_open+0x13a>
		case 250000:
			ubrr = 7;
 72e:	87 e0       	ldi	r24, 0x07	; 7
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	a0 e0       	ldi	r26, 0x00	; 0
 734:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 736:	09 c0       	rjmp	.+18     	; 0x74a <serial_open+0x13a>
		default:
			//assume 19200
			ubrr = 103;
 738:	87 e6       	ldi	r24, 0x67	; 103
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	a0 e0       	ldi	r26, 0x00	; 0
 73e:	b0 e0       	ldi	r27, 0x00	; 0
			break;
 740:	04 c0       	rjmp	.+8      	; 0x74a <serial_open+0x13a>
	
	//figure out correct UBRR0 value for baud rate
	long ubrr;
	switch(speed) {
		case 2400:
			ubrr = 832;
 742:	80 e4       	ldi	r24, 0x40	; 64
 744:	93 e0       	ldi	r25, 0x03	; 3
 746:	a0 e0       	ldi	r26, 0x00	; 0
 748:	b0 e0       	ldi	r27, 0x00	; 0
			ubrr = 103;
			break;
	}
	
	//set the baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 74a:	49 2f       	mov	r20, r25
 74c:	5a 2f       	mov	r21, r26
 74e:	6b 2f       	mov	r22, r27
 750:	77 27       	eor	r23, r23
 752:	67 fd       	sbrc	r22, 7
 754:	7a 95       	dec	r23
 756:	40 93 c5 00 	sts	0x00C5, r20
	UBRR0L = (unsigned char)ubrr;
 75a:	80 93 c4 00 	sts	0x00C4, r24
	
	//enable interrupts after config
	sei();
 75e:	78 94       	sei
 760:	08 95       	ret

00000762 <_exit>:
 762:	f8 94       	cli

00000764 <__stop_program>:
 764:	ff cf       	rjmp	.-2      	; 0x764 <__stop_program>

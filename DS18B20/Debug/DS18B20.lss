
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000770  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800200  00800200  000007e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000858  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d25  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000588  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d90  00000000  00000000  00001c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00002a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a10  00000000  00000000  000030cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	83 c1       	rjmp	.+774    	; 0x35c <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e7       	ldi	r30, 0x70	; 112
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 33       	cpi	r26, 0x39	; 57
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	47 d2       	rcall	.+1166   	; 0x5ae <main>
 120:	25 c3       	rjmp	.+1610   	; 0x76c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
		.global x_yield
x_yield:
//------------------------------------------------------------------
// Save "callee-save" registers
//------------------------------------------------------------------
		push	r28
 124:	cf 93       	push	r28
		push	r29
 126:	df 93       	push	r29
		push	r2
 128:	2f 92       	push	r2
		push	r3
 12a:	3f 92       	push	r3
		push	r4
 12c:	4f 92       	push	r4
		push	r5
 12e:	5f 92       	push	r5
		push	r6
 130:	6f 92       	push	r6
		push	r7
 132:	7f 92       	push	r7
		push	r8
 134:	8f 92       	push	r8
		push	r9
 136:	9f 92       	push	r9
		push	r10
 138:	af 92       	push	r10
		push	r11
 13a:	bf 92       	push	r11
		push	r12
 13c:	cf 92       	push	r12
		push	r13
 13e:	df 92       	push	r13
		push	r14
 140:	ef 92       	push	r14
		push	r15
 142:	ff 92       	push	r15
		push	r16
 144:	0f 93       	push	r16
		push	r17
 146:	1f 93       	push	r17

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------

		lds	r20,	x_thread_id
 148:	40 91 00 02 	lds	r20, 0x0200
		lds	r21,	x_thread_mask
 14c:	50 91 38 02 	lds	r21, 0x0238

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 150:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 152:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 154:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 156:	e8 e1       	ldi	r30, 0x18	; 24
		ldi r31,	hi8(stacks)	;load the other byte
 158:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 15a:	e6 0f       	add	r30, r22
		;adc r31,	0			;pull in the carry from previous, if any
		
		;write the SP into the stack save area
		lds	r16,	(0x5d)		;Load SP low byte
 15c:	00 91 5d 00 	lds	r16, 0x005D
		st	Z,		r16			;save SP low byte
 160:	00 83       	st	Z, r16
		lds r16,	(0x5e)		;Load SP high byte
 162:	00 91 5e 00 	lds	r16, 0x005E
		std	Z+1,	r16			;save SP high byte
 166:	01 83       	std	Z+1, r16	; 0x01

00000168 <x_schedule>:
;                         if entered from x_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds r18,	disables	;load the disabled status
 168:	20 91 01 02 	lds	r18, 0x0201
		lds r19,	suspends	;load the suspended status
 16c:	30 91 03 02 	lds	r19, 0x0203
		or	r18,	r19			;or disables and suspends
 170:	23 2b       	or	r18, r19
		lds r19,	delays		;load the delayed status
 172:	30 91 02 02 	lds	r19, 0x0202
		or	r18,	r19			;or disables, suspends, and delays
 176:	23 2b       	or	r18, r19

		lds	r20,	x_thread_id	;load the id of the current thread
 178:	40 91 00 02 	lds	r20, 0x0200
		lds r21,	x_thread_mask	;load the thread id mask
 17c:	50 91 38 02 	lds	r21, 0x0238

		ldi	r23,	0			;load loop counter
 180:	70 e0       	ldi	r23, 0x00	; 0

00000182 <loop>:

;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
loop:
		cpi	r23,	8			;compare loop counter to 7
 182:	78 30       	cpi	r23, 0x08	; 8
		breq x_schedule			;if equal, restart scheduling
 184:	89 f3       	breq	.-30     	; 0x168 <x_schedule>
		inc	r20					;increment thread id
 186:	43 95       	inc	r20
		lsl r21					;rotate thread mask left
 188:	55 0f       	add	r21, r21
		cpi	r21,	0			;check if thread mask is zero
 18a:	50 30       	cpi	r21, 0x00	; 0
		brne skip				;jump over second rotate
 18c:	11 f4       	brne	.+4      	; 0x192 <skip>
		inc r21					;reset the thread mask to one
 18e:	53 95       	inc	r21
		ldi	r20,	0			;reset thread id to zero
 190:	40 e0       	ldi	r20, 0x00	; 0

00000192 <skip>:
skip:	
		mov r22,	r21			;copy the thread mask
 192:	65 2f       	mov	r22, r21
		and	r22,	r18			;compare thread mask to or-ed statuses
 194:	62 23       	and	r22, r18
		inc r23					;increment loop counter
 196:	73 95       	inc	r23
		cpi r22,	0			;if the result is zero, this next thread is ready
 198:	60 30       	cpi	r22, 0x00	; 0
		brne loop				;else restart the loop
 19a:	99 f7       	brne	.-26     	; 0x182 <loop>

		jmp	restore				;skip the nap code
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <restore>

0000019e <nap>:
;----------------------------------------------------------
nap:
		; add sleep instructions here...
		;sleep
		;TODO: uncomment & implement
		rjmp	x_schedule			
 19e:	e4 cf       	rjmp	.-56     	; 0x168 <x_schedule>

000001a0 <restore>:
restore:
		;r20 holds thread id
		;r21 holds thread mask

		;set the thread id
		sts x_thread_id,	r20
 1a0:	40 93 00 02 	sts	0x0200, r20
		;set the thread mask
		sts x_thread_mask, r21
 1a4:	50 93 38 02 	sts	0x0238, r21

		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 1a8:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 1aa:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 1ac:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 1ae:	e8 e1       	ldi	r30, 0x18	; 24
		ldi r31,	hi8(stacks)	;load the other byte
 1b0:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 1b2:	e6 0f       	add	r30, r22
		;adc r31,	0			;pull in the carry from previous, if any
		
		// update hardware SP
		ld	r23,	Z+			;load new thread's low SP byte
 1b4:	71 91       	ld	r23, Z+
		ld	r24,	Z			;load new thread's high SP byte
 1b6:	80 81       	ld	r24, Z
		sts	(0x5d),	r23			;change lower SP byte
 1b8:	70 93 5d 00 	sts	0x005D, r23
		sts (0x5e),	r24			;change upper SP byte
 1bc:	80 93 5e 00 	sts	0x005E, r24

		// Restore registers
		pop	r17
 1c0:	1f 91       	pop	r17
		pop	r16
 1c2:	0f 91       	pop	r16
		pop	r15
 1c4:	ff 90       	pop	r15
		pop	r14
 1c6:	ef 90       	pop	r14
		pop	r13
 1c8:	df 90       	pop	r13
		pop	r12
 1ca:	cf 90       	pop	r12
		pop	r11
 1cc:	bf 90       	pop	r11
		pop	r10
 1ce:	af 90       	pop	r10
		pop	r9
 1d0:	9f 90       	pop	r9
		pop	r8
 1d2:	8f 90       	pop	r8
		pop	r7
 1d4:	7f 90       	pop	r7
		pop	r6
 1d6:	6f 90       	pop	r6
		pop	r5
 1d8:	5f 90       	pop	r5
		pop	r4
 1da:	4f 90       	pop	r4
		pop	r3
 1dc:	3f 90       	pop	r3
		pop	r2
 1de:	2f 90       	pop	r2
		pop	r29
 1e0:	df 91       	pop	r29
		pop	r28
 1e2:	cf 91       	pop	r28

		// Return to next thread
		ret
 1e4:	08 95       	ret

000001e6 <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
 1e6:	68 2f       	mov	r22, r24
		or  r22,r25
 1e8:	69 2b       	or	r22, r25
		nop
 1ea:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
 1ec:	31 f0       	breq	.+12     	; 0x1fa <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
 1ee:	05 d0       	rcall	.+10     	; 0x1fa <delay_usec+0x14>
		rjmp	3f      // 2 cycles
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <delay_usec+0xc>
3:	
		nop		// 1 cycle
 1f2:	00 00       	nop
		sbiw	r24,1   // 2 cycles
 1f4:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
 1f8:	00 00       	nop
1:
 1fa:	08 95       	ret

000001fc <x_init>:
	}
	if (tid == x_thread_id) {
		//we've just overwritten the current thread, so reschedule
		x_schedule();
	}
}
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	e8 e1       	ldi	r30, 0x18	; 24
 202:	f2 e0       	ldi	r31, 0x02	; 2
 204:	8f e7       	ldi	r24, 0x7F	; 127
 206:	91 e2       	ldi	r25, 0x21	; 33
 208:	91 83       	std	Z+1, r25	; 0x01
 20a:	80 83       	st	Z, r24
 20c:	93 83       	std	Z+3, r25	; 0x03
 20e:	82 83       	std	Z+2, r24	; 0x02
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	90 e2       	ldi	r25, 0x20	; 32
 214:	95 83       	std	Z+5, r25	; 0x05
 216:	84 83       	std	Z+4, r24	; 0x04
 218:	97 83       	std	Z+7, r25	; 0x07
 21a:	86 83       	std	Z+6, r24	; 0x06
 21c:	8f e7       	ldi	r24, 0x7F	; 127
 21e:	90 e2       	ldi	r25, 0x20	; 32
 220:	91 87       	std	Z+9, r25	; 0x09
 222:	80 87       	std	Z+8, r24	; 0x08
 224:	93 87       	std	Z+11, r25	; 0x0b
 226:	82 87       	std	Z+10, r24	; 0x0a
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	9f e1       	ldi	r25, 0x1F	; 31
 22c:	95 87       	std	Z+13, r25	; 0x0d
 22e:	84 87       	std	Z+12, r24	; 0x0c
 230:	97 87       	std	Z+15, r25	; 0x0f
 232:	86 87       	std	Z+14, r24	; 0x0e
 234:	8f e7       	ldi	r24, 0x7F	; 127
 236:	9f e1       	ldi	r25, 0x1F	; 31
 238:	91 8b       	std	Z+17, r25	; 0x11
 23a:	80 8b       	std	Z+16, r24	; 0x10
 23c:	93 8b       	std	Z+19, r25	; 0x13
 23e:	82 8b       	std	Z+18, r24	; 0x12
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	9e e1       	ldi	r25, 0x1E	; 30
 244:	95 8b       	std	Z+21, r25	; 0x15
 246:	84 8b       	std	Z+20, r24	; 0x14
 248:	97 8b       	std	Z+23, r25	; 0x17
 24a:	86 8b       	std	Z+22, r24	; 0x16
 24c:	8f e7       	ldi	r24, 0x7F	; 127
 24e:	9e e1       	ldi	r25, 0x1E	; 30
 250:	91 8f       	std	Z+25, r25	; 0x19
 252:	80 8f       	std	Z+24, r24	; 0x18
 254:	93 8f       	std	Z+27, r25	; 0x1b
 256:	82 8f       	std	Z+26, r24	; 0x1a
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	9d e1       	ldi	r25, 0x1D	; 29
 25c:	95 8f       	std	Z+29, r25	; 0x1d
 25e:	84 8f       	std	Z+28, r24	; 0x1c
 260:	97 8f       	std	Z+31, r25	; 0x1f
 262:	86 8f       	std	Z+30, r24	; 0x1e
 264:	8a ea       	ldi	r24, 0xAA	; 170
 266:	80 93 00 21 	sts	0x2100, r24
 26a:	80 93 80 20 	sts	0x2080, r24
 26e:	80 93 00 20 	sts	0x2000, r24
 272:	80 93 80 1f 	sts	0x1F80, r24
 276:	80 93 00 1f 	sts	0x1F00, r24
 27a:	80 93 80 1e 	sts	0x1E80, r24
 27e:	80 93 00 1e 	sts	0x1E00, r24
 282:	80 93 80 1d 	sts	0x1D80, r24
 286:	10 92 14 02 	sts	0x0214, r1
 28a:	10 92 15 02 	sts	0x0215, r1
 28e:	10 92 16 02 	sts	0x0216, r1
 292:	10 92 17 02 	sts	0x0217, r1
 296:	e4 e0       	ldi	r30, 0x04	; 4
 298:	f2 e0       	ldi	r31, 0x02	; 2
 29a:	11 82       	std	Z+1, r1	; 0x01
 29c:	10 82       	st	Z, r1
 29e:	13 82       	std	Z+3, r1	; 0x03
 2a0:	12 82       	std	Z+2, r1	; 0x02
 2a2:	15 82       	std	Z+5, r1	; 0x05
 2a4:	14 82       	std	Z+4, r1	; 0x04
 2a6:	17 82       	std	Z+7, r1	; 0x07
 2a8:	16 82       	std	Z+6, r1	; 0x06
 2aa:	11 86       	std	Z+9, r1	; 0x09
 2ac:	10 86       	std	Z+8, r1	; 0x08
 2ae:	13 86       	std	Z+11, r1	; 0x0b
 2b0:	12 86       	std	Z+10, r1	; 0x0a
 2b2:	15 86       	std	Z+13, r1	; 0x0d
 2b4:	14 86       	std	Z+12, r1	; 0x0c
 2b6:	17 86       	std	Z+15, r1	; 0x0f
 2b8:	16 86       	std	Z+14, r1	; 0x0e
 2ba:	8e ef       	ldi	r24, 0xFE	; 254
 2bc:	80 93 01 02 	sts	0x0201, r24
 2c0:	10 92 02 02 	sts	0x0202, r1
 2c4:	10 92 03 02 	sts	0x0203, r1
 2c8:	10 92 00 02 	sts	0x0200, r1
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 38 02 	sts	0x0238, r24
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	84 bd       	out	0x24, r24	; 36
 2d6:	9a ef       	ldi	r25, 0xFA	; 250
 2d8:	97 bd       	out	0x27, r25	; 39
 2da:	80 93 6e 00 	sts	0x006E, r24
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	85 bd       	out	0x25, r24	; 37
 2e2:	8d b7       	in	r24, 0x3d	; 61
 2e4:	9e b7       	in	r25, 0x3e	; 62
 2e6:	81 15       	cp	r24, r1
 2e8:	92 42       	sbci	r25, 0x22	; 34
 2ea:	b0 f4       	brcc	.+44     	; 0x318 <x_init+0x11c>
 2ec:	a0 e8       	ldi	r26, 0x80	; 128
 2ee:	b1 e2       	ldi	r27, 0x21	; 33
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	92 e2       	ldi	r25, 0x22	; 34
 2f4:	c1 e0       	ldi	r28, 0x01	; 1
 2f6:	d2 e2       	ldi	r29, 0x22	; 34
 2f8:	fc 01       	movw	r30, r24
 2fa:	22 91       	ld	r18, -Z
 2fc:	2e 93       	st	-X, r18
 2fe:	be 01       	movw	r22, r28
 300:	68 1b       	sub	r22, r24
 302:	79 0b       	sbc	r23, r25
 304:	9c 01       	movw	r18, r24
 306:	22 50       	subi	r18, 0x02	; 2
 308:	31 09       	sbc	r19, r1
 30a:	4d b7       	in	r20, 0x3d	; 61
 30c:	5e b7       	in	r21, 0x3e	; 62
 30e:	cf 01       	movw	r24, r30
 310:	24 17       	cp	r18, r20
 312:	35 07       	cpc	r19, r21
 314:	88 f7       	brcc	.-30     	; 0x2f8 <x_init+0xfc>
 316:	02 c0       	rjmp	.+4      	; 0x31c <x_init+0x120>
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	f8 94       	cli
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	91 e2       	ldi	r25, 0x21	; 33
 322:	86 1b       	sub	r24, r22
 324:	97 0b       	sbc	r25, r23
 326:	9e bf       	out	0x3e, r25	; 62
 328:	8d bf       	out	0x3d, r24	; 61
 32a:	78 94       	sei
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <x_delay>:
 * tick frequency, set at system initialization.
 *
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_delay(int ticks) {
 332:	9c 01       	movw	r18, r24
	//disable this thread
	delays |= x_thread_mask;
 334:	80 91 02 02 	lds	r24, 0x0202
 338:	90 91 38 02 	lds	r25, 0x0238
 33c:	98 2b       	or	r25, r24
 33e:	90 93 02 02 	sts	0x0202, r25
	cli(); //disable interrupts
 342:	f8 94       	cli
	x_thread_delay[x_thread_id] = ticks;
 344:	e0 91 00 02 	lds	r30, 0x0200
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	ec 5f       	subi	r30, 0xFC	; 252
 350:	fd 4f       	sbci	r31, 0xFD	; 253
 352:	31 83       	std	Z+1, r19	; 0x01
 354:	20 83       	st	Z, r18
	sei(); //enable interrupts
 356:	78 94       	sei
	x_yield(); //reschedule
 358:	e5 ce       	rjmp	.-566    	; 0x124 <x_yield>
 35a:	08 95       	ret

0000035c <__vector_21>:
/*
 * The interrupt service routine for timer0.
 * Decrements delays for all threads and enables threads
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	0b b6       	in	r0, 0x3b	; 59
 368:	0f 92       	push	r0
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
 37c:	ef 93       	push	r30
 37e:	ff 93       	push	r31
 380:	60 91 02 02 	lds	r22, 0x0202
	int i = 0;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
			x_thread_delay[i]--;
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
			//enable this thread
			delays &= ~(0x1 << i);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	50 e0       	ldi	r21, 0x00	; 0
 */
ISR(TIMER0_COMPA_vect){
	int i = 0;
	for (; i < NUM_THREADS; i++) {
		//if the count is nonzero
		if (x_thread_delay[i] > 0) {
 38c:	fc 01       	movw	r30, r24
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	ec 5f       	subi	r30, 0xFC	; 252
 394:	fd 4f       	sbci	r31, 0xFD	; 253
 396:	20 81       	ld	r18, Z
 398:	31 81       	ldd	r19, Z+1	; 0x01
 39a:	23 2b       	or	r18, r19
 39c:	59 f0       	breq	.+22     	; 0x3b4 <__vector_21+0x58>
			//decrement the count
			x_thread_delay[i]--;
 39e:	fc 01       	movw	r30, r24
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	ec 5f       	subi	r30, 0xFC	; 252
 3a6:	fd 4f       	sbci	r31, 0xFD	; 253
 3a8:	20 81       	ld	r18, Z
 3aa:	31 81       	ldd	r19, Z+1	; 0x01
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	31 09       	sbc	r19, r1
 3b0:	31 83       	std	Z+1, r19	; 0x01
 3b2:	20 83       	st	Z, r18
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
 3b4:	fc 01       	movw	r30, r24
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	ec 5f       	subi	r30, 0xFC	; 252
 3bc:	fd 4f       	sbci	r31, 0xFD	; 253
 3be:	20 81       	ld	r18, Z
 3c0:	31 81       	ldd	r19, Z+1	; 0x01
 3c2:	23 2b       	or	r18, r19
 3c4:	49 f4       	brne	.+18     	; 0x3d8 <__vector_21+0x7c>
			//enable this thread
			delays &= ~(0x1 << i);
 3c6:	9a 01       	movw	r18, r20
 3c8:	08 2e       	mov	r0, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__vector_21+0x74>
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <__vector_21+0x70>
 3d4:	20 95       	com	r18
 3d6:	62 23       	and	r22, r18
 * Decrements delays for all threads and enables threads
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
	int i = 0;
	for (; i < NUM_THREADS; i++) {
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	88 30       	cpi	r24, 0x08	; 8
 3dc:	91 05       	cpc	r25, r1
 3de:	b1 f6       	brne	.-84     	; 0x38c <__vector_21+0x30>
 3e0:	60 93 02 02 	sts	0x0202, r22
		if (x_thread_delay[i] == 0) {
			//enable this thread
			delays &= ~(0x1 << i);
		}
	}
	ticks++;
 3e4:	80 91 14 02 	lds	r24, 0x0214
 3e8:	90 91 15 02 	lds	r25, 0x0215
 3ec:	a0 91 16 02 	lds	r26, 0x0216
 3f0:	b0 91 17 02 	lds	r27, 0x0217
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	a1 1d       	adc	r26, r1
 3f8:	b1 1d       	adc	r27, r1
 3fa:	80 93 14 02 	sts	0x0214, r24
 3fe:	90 93 15 02 	sts	0x0215, r25
 402:	a0 93 16 02 	sts	0x0216, r26
 406:	b0 93 17 02 	sts	0x0217, r27
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0b be       	out	0x3b, r0	; 59
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <ow_reset>:

/************************************************************************/
/* Attempts to determine whether there is a sensor attached.            */
/************************************************************************/
unsigned char ow_reset(void)
{
 42e:	cf 93       	push	r28
	unsigned char presence;

 // pull DQ line low
	DDRE |= (1 << PE4); //set for output
 430:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4); //set value low
 432:	74 98       	cbi	0x0e, 4	; 14

 // leave it low for 480us
	delay_usec(479);
 434:	8f ed       	ldi	r24, 0xDF	; 223
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	d6 de       	rcall	.-596    	; 0x1e6 <delay_usec>

 // allow line to return high
	PORTE |= (1 << PE4); //set value high
 43a:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
 43c:	6c 98       	cbi	0x0d, 4	; 13
	//PORTE &= ~(1 << PE4); //set value low?

 // wait for presence
	delay_usec(69);
 43e:	85 e4       	ldi	r24, 0x45	; 69
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	d1 de       	rcall	.-606    	; 0x1e6 <delay_usec>

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
 444:	cc b1       	in	r28, 0x0c	; 12

// wait for end of timeslot
	delay_usec(229); 
 446:	85 ee       	ldi	r24, 0xE5	; 229
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	cd de       	rcall	.-614    	; 0x1e6 <delay_usec>

 // wait for presence
	delay_usec(69);

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
 44c:	c2 95       	swap	r28
 44e:	c1 70       	andi	r28, 0x01	; 1

// wait for end of timeslot
	delay_usec(229); 

	return(presence); // presence signal returned
} // 1=presence, 0=no sensor
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	8c 27       	eor	r24, r28
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <ow_read_bit>:
/* Read a single bit from the sensor                                    */
/************************************************************************/
unsigned char ow_read_bit(void)
{
	//pull low
	DDRE |= (1 << PE4);
 458:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
 45a:	74 98       	cbi	0x0e, 4	; 14
	//let return to high
	PORTE |= (1 << PE4); //set value high
 45c:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
 45e:	6c 98       	cbi	0x0d, 4	; 13
	
	delay_usec(14); //wait 15us
 460:	8e e0       	ldi	r24, 0x0E	; 14
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	c0 de       	rcall	.-640    	; 0x1e6 <delay_usec>
	
	return(PINE & (1 << PE4));
 466:	8c b1       	in	r24, 0x0c	; 12
}
 468:	80 71       	andi	r24, 0x10	; 16
 46a:	08 95       	ret

0000046c <ow_write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void ow_write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
 46c:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
 46e:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	09 f4       	brne	.+2      	; 0x476 <ow_write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
 474:	74 9a       	sbi	0x0e, 4	; 14
	}
	
	delay_usec(59); //wait 60us
 476:	8b e3       	ldi	r24, 0x3B	; 59
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	b5 de       	rcall	.-662    	; 0x1e6 <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
 47c:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
 47e:	6c 98       	cbi	0x0d, 4	; 13
 480:	08 95       	ret

00000482 <ow_read_byte>:

/************************************************************************/
/* Read a single byte from the sensor                                   */
/************************************************************************/
unsigned char ow_read_byte(void) 
{
 482:	ef 92       	push	r14
 484:	ff 92       	push	r15
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	c0 e0       	ldi	r28, 0x00	; 0
 48e:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char value = 0;
 490:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
			value |= 0x01 << i; //reads a bit and left-shifts it into place
 492:	ee 24       	eor	r14, r14
 494:	e3 94       	inc	r14
 496:	f1 2c       	mov	r15, r1
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
 498:	df df       	rcall	.-66     	; 0x458 <ow_read_bit>
 49a:	88 23       	and	r24, r24
 49c:	41 f0       	breq	.+16     	; 0x4ae <ow_read_byte+0x2c>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
 49e:	c7 01       	movw	r24, r14
 4a0:	0c 2e       	mov	r0, r28
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <ow_read_byte+0x26>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <ow_read_byte+0x22>
 4ac:	18 2b       	or	r17, r24
		}
		delay_usec(19); //wait 20us
 4ae:	83 e1       	ldi	r24, 0x13	; 19
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	99 de       	rcall	.-718    	; 0x1e6 <delay_usec>
 4b4:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
 4b6:	c8 30       	cpi	r28, 0x08	; 8
 4b8:	d1 05       	cpc	r29, r1
 4ba:	71 f7       	brne	.-36     	; 0x498 <ow_read_byte+0x16>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
		}
		delay_usec(19); //wait 20us
	}
	return value;
}
 4bc:	81 2f       	mov	r24, r17
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	08 95       	ret

000004ca <ow_write_byte>:

/************************************************************************/
/* Write a single byte to the sensor                                    */
/************************************************************************/
void ow_write_byte(char val)
{
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
		temp = val >> i;
 4d6:	08 2f       	mov	r16, r24
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	c8 01       	movw	r24, r16
 4dc:	0c 2e       	mov	r0, r28
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <ow_write_byte+0x1a>
 4e0:	95 95       	asr	r25
 4e2:	87 95       	ror	r24
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <ow_write_byte+0x16>
		temp &= 0x01;
		ow_write_bit(temp);
 4e8:	81 70       	andi	r24, 0x01	; 1
 4ea:	c0 df       	rcall	.-128    	; 0x46c <ow_write_bit>
 4ec:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
void ow_write_byte(char val)
{
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
 4ee:	c8 30       	cpi	r28, 0x08	; 8
 4f0:	d1 05       	cpc	r29, r1
 4f2:	99 f7       	brne	.-26     	; 0x4da <ow_write_byte+0x10>
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
 4f4:	87 e7       	ldi	r24, 0x77	; 119
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	76 de       	rcall	.-788    	; 0x1e6 <delay_usec>
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	08 95       	ret

00000504 <ow_read_temperature>:

/************************************************************************/
/* Read the current temperature from the sensor                         */
/************************************************************************/
int ow_read_temperature(void)
{
 504:	ef 92       	push	r14
 506:	ff 92       	push	r15
 508:	0f 93       	push	r16
 50a:	1f 93       	push	r17
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	2a 97       	sbiw	r28, 0x0a	; 10
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
	char get[10];
	char temp_lsb,temp_msb;
	int k;
	char temp_c;
	//char temp_f;
	ow_reset();
 520:	86 df       	rcall	.-244    	; 0x42e <ow_reset>
	ow_write_byte(0xCC); //Skip ROM
 522:	8c ec       	ldi	r24, 0xCC	; 204
 524:	d2 df       	rcall	.-92     	; 0x4ca <ow_write_byte>
	ow_write_byte(0x44); // Start Conversion
 526:	84 e4       	ldi	r24, 0x44	; 68
 528:	d0 df       	rcall	.-96     	; 0x4ca <ow_write_byte>
	delay_usec(119); //wait 120us
 52a:	87 e7       	ldi	r24, 0x77	; 119
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	5b de       	rcall	.-842    	; 0x1e6 <delay_usec>
	ow_reset();
 530:	7e df       	rcall	.-260    	; 0x42e <ow_reset>
	ow_write_byte(0xCC); // Skip ROM
 532:	8c ec       	ldi	r24, 0xCC	; 204
 534:	ca df       	rcall	.-108    	; 0x4ca <ow_write_byte>
	ow_write_byte(0xBE); // Read Scratch Pad
 536:	8e eb       	ldi	r24, 0xBE	; 190
 538:	c8 df       	rcall	.-112    	; 0x4ca <ow_write_byte>
 53a:	8e 01       	movw	r16, r28
 53c:	0f 5f       	subi	r16, 0xFF	; 255
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
 540:	7e 01       	movw	r14, r28
 542:	8a e0       	ldi	r24, 0x0A	; 10
 544:	e8 0e       	add	r14, r24
 546:	f1 1c       	adc	r15, r1
	for (k=0; k<9; k++) {
		get[k] = ow_read_byte();
 548:	9c df       	rcall	.-200    	; 0x482 <ow_read_byte>
 54a:	f8 01       	movw	r30, r16
 54c:	81 93       	st	Z+, r24
 54e:	8f 01       	movw	r16, r30
	ow_write_byte(0x44); // Start Conversion
	delay_usec(119); //wait 120us
	ow_reset();
	ow_write_byte(0xCC); // Skip ROM
	ow_write_byte(0xBE); // Read Scratch Pad
	for (k=0; k<9; k++) {
 550:	ee 15       	cp	r30, r14
 552:	ff 05       	cpc	r31, r15
 554:	c9 f7       	brne	.-14     	; 0x548 <ow_read_temperature+0x44>
		get[k] = ow_read_byte();
	}
	temp_msb = get[1]; // Sign byte + lsbit
 556:	9a 81       	ldd	r25, Y+2	; 0x02
	temp_lsb = get[0]; // Temp data plus lsb
 558:	89 81       	ldd	r24, Y+1	; 0x01
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb/2);} // shift to get whole degree
 55a:	91 38       	cpi	r25, 0x81	; 129
 55c:	40 f4       	brcc	.+16     	; 0x56e <ow_read_temperature+0x6a>
 55e:	86 95       	lsr	r24
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
 560:	99 23       	and	r25, r25
 562:	1c f4       	brge	.+6      	; 0x56a <ow_read_temperature+0x66>
 564:	81 95       	neg	r24
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
 566:	86 95       	lsr	r24
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
 568:	81 95       	neg	r24
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	03 c0       	rjmp	.+6      	; 0x574 <ow_read_temperature+0x70>
	}
	temp_msb = get[1]; // Sign byte + lsbit
	temp_lsb = get[0]; // Temp data plus lsb
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb/2);} // shift to get whole degree
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
 56e:	99 23       	and	r25, r25
 570:	e4 f7       	brge	.-8      	; 0x56a <ow_read_temperature+0x66>
 572:	f8 cf       	rjmp	.-16     	; 0x564 <ow_read_temperature+0x60>
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
}
 574:	2a 96       	adiw	r28, 0x0a	; 10
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	08 95       	ret

0000058e <ow_print_temp>:

/************************************************************************/
/* Print the temperature to the serial port. (must have already opened serial)*/
/************************************************************************/
void ow_print_temp(void) {
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	1f 92       	push	r1
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	char temp_c = ow_read_temperature();
 598:	b5 df       	rcall	.-150    	; 0x504 <ow_read_temperature>
 59a:	89 83       	std	Y+1, r24	; 0x01
	//char * message = "0x%x\n\r";
	//sprintf(message, message, temp_c);
	serial_write_string(&temp_c, 1);
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	ce d0       	rcall	.+412    	; 0x742 <serial_write_string>
 5a6:	0f 90       	pop	r0
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <main>:
/*
 * Kick off the whole shabang
 */
int main(void)
{
	x_init();
 5ae:	26 de       	rcall	.-948    	; 0x1fc <x_init>
	//x_new(0, sensor_controller, 1);
	//x_new(1, io_controller, 1);
	//x_new(2, box_controller, 1);
	serial_open(19200, SERIAL_8N1);
 5b0:	46 e0       	ldi	r20, 0x06	; 6
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	7b e4       	ldi	r23, 0x4B	; 75
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	05 d0       	rcall	.+10     	; 0x5c8 <serial_open>
	while(1) {
		ow_print_temp();
 5be:	e7 df       	rcall	.-50     	; 0x58e <ow_print_temp>
		x_delay(2000);//wait 2 seconds
 5c0:	80 ed       	ldi	r24, 0xD0	; 208
 5c2:	97 e0       	ldi	r25, 0x07	; 7
 5c4:	b6 de       	rcall	.-660    	; 0x332 <x_delay>
	}
 5c6:	fb cf       	rjmp	.-10     	; 0x5be <main+0x10>

000005c8 <serial_open>:
	while ( !(UCSR0A & (1<<RXC0)) ) {
		x_yield();
	}
	/* Get and return received data from buffer */
	return UDR0;
}
 5c8:	f8 94       	cli
 5ca:	40 93 c2 00 	sts	0x00C2, r20
 5ce:	28 e1       	ldi	r18, 0x18	; 24
 5d0:	20 93 c1 00 	sts	0x00C1, r18
 5d4:	e0 ec       	ldi	r30, 0xC0	; 192
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	20 81       	ld	r18, Z
 5da:	22 60       	ori	r18, 0x02	; 2
 5dc:	20 83       	st	Z, r18
 5de:	60 38       	cpi	r22, 0x80	; 128
 5e0:	20 e7       	ldi	r18, 0x70	; 112
 5e2:	72 07       	cpc	r23, r18
 5e4:	81 05       	cpc	r24, r1
 5e6:	91 05       	cpc	r25, r1
 5e8:	09 f4       	brne	.+2      	; 0x5ec <serial_open+0x24>
 5ea:	5f c0       	rjmp	.+190    	; 0x6aa <serial_open+0xe2>
 5ec:	0c f5       	brge	.+66     	; 0x630 <serial_open+0x68>
 5ee:	60 38       	cpi	r22, 0x80	; 128
 5f0:	25 e2       	ldi	r18, 0x25	; 37
 5f2:	72 07       	cpc	r23, r18
 5f4:	81 05       	cpc	r24, r1
 5f6:	91 05       	cpc	r25, r1
 5f8:	09 f4       	brne	.+2      	; 0x5fc <serial_open+0x34>
 5fa:	48 c0       	rjmp	.+144    	; 0x68c <serial_open+0xc4>
 5fc:	6c f4       	brge	.+26     	; 0x618 <serial_open+0x50>
 5fe:	60 36       	cpi	r22, 0x60	; 96
 600:	29 e0       	ldi	r18, 0x09	; 9
 602:	72 07       	cpc	r23, r18
 604:	81 05       	cpc	r24, r1
 606:	91 05       	cpc	r25, r1
 608:	09 f4       	brne	.+2      	; 0x60c <serial_open+0x44>
 60a:	77 c0       	rjmp	.+238    	; 0x6fa <serial_open+0x132>
 60c:	60 3c       	cpi	r22, 0xC0	; 192
 60e:	72 41       	sbci	r23, 0x12	; 18
 610:	81 05       	cpc	r24, r1
 612:	91 05       	cpc	r25, r1
 614:	b1 f1       	breq	.+108    	; 0x682 <serial_open+0xba>
 616:	6c c0       	rjmp	.+216    	; 0x6f0 <serial_open+0x128>
 618:	60 34       	cpi	r22, 0x40	; 64
 61a:	28 e3       	ldi	r18, 0x38	; 56
 61c:	72 07       	cpc	r23, r18
 61e:	81 05       	cpc	r24, r1
 620:	91 05       	cpc	r25, r1
 622:	c9 f1       	breq	.+114    	; 0x696 <serial_open+0xce>
 624:	61 15       	cp	r22, r1
 626:	7b 44       	sbci	r23, 0x4B	; 75
 628:	81 05       	cpc	r24, r1
 62a:	91 05       	cpc	r25, r1
 62c:	c9 f1       	breq	.+114    	; 0x6a0 <serial_open+0xd8>
 62e:	60 c0       	rjmp	.+192    	; 0x6f0 <serial_open+0x128>
 630:	61 15       	cp	r22, r1
 632:	2c e2       	ldi	r18, 0x2C	; 44
 634:	72 07       	cpc	r23, r18
 636:	21 e0       	ldi	r18, 0x01	; 1
 638:	82 07       	cpc	r24, r18
 63a:	91 05       	cpc	r25, r1
 63c:	09 f4       	brne	.+2      	; 0x640 <serial_open+0x78>
 63e:	44 c0       	rjmp	.+136    	; 0x6c8 <serial_open+0x100>
 640:	64 f4       	brge	.+24     	; 0x65a <serial_open+0x92>
 642:	61 15       	cp	r22, r1
 644:	26 e9       	ldi	r18, 0x96	; 150
 646:	72 07       	cpc	r23, r18
 648:	81 05       	cpc	r24, r1
 64a:	91 05       	cpc	r25, r1
 64c:	99 f1       	breq	.+102    	; 0x6b4 <serial_open+0xec>
 64e:	61 15       	cp	r22, r1
 650:	71 4e       	sbci	r23, 0xE1	; 225
 652:	81 05       	cpc	r24, r1
 654:	91 05       	cpc	r25, r1
 656:	99 f1       	breq	.+102    	; 0x6be <serial_open+0xf6>
 658:	4b c0       	rjmp	.+150    	; 0x6f0 <serial_open+0x128>
 65a:	61 15       	cp	r22, r1
 65c:	24 e8       	ldi	r18, 0x84	; 132
 65e:	72 07       	cpc	r23, r18
 660:	23 e0       	ldi	r18, 0x03	; 3
 662:	82 07       	cpc	r24, r18
 664:	91 05       	cpc	r25, r1
 666:	d1 f1       	breq	.+116    	; 0x6dc <serial_open+0x114>
 668:	60 39       	cpi	r22, 0x90	; 144
 66a:	20 ed       	ldi	r18, 0xD0	; 208
 66c:	72 07       	cpc	r23, r18
 66e:	23 e0       	ldi	r18, 0x03	; 3
 670:	82 07       	cpc	r24, r18
 672:	91 05       	cpc	r25, r1
 674:	c1 f1       	breq	.+112    	; 0x6e6 <serial_open+0x11e>
 676:	61 15       	cp	r22, r1
 678:	72 4c       	sbci	r23, 0xC2	; 194
 67a:	81 40       	sbci	r24, 0x01	; 1
 67c:	91 05       	cpc	r25, r1
 67e:	c1 f5       	brne	.+112    	; 0x6f0 <serial_open+0x128>
 680:	28 c0       	rjmp	.+80     	; 0x6d2 <serial_open+0x10a>
 682:	80 ea       	ldi	r24, 0xA0	; 160
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	a0 e0       	ldi	r26, 0x00	; 0
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	3b c0       	rjmp	.+118    	; 0x702 <serial_open+0x13a>
 68c:	8f ec       	ldi	r24, 0xCF	; 207
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	a0 e0       	ldi	r26, 0x00	; 0
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	36 c0       	rjmp	.+108    	; 0x702 <serial_open+0x13a>
 696:	8a e8       	ldi	r24, 0x8A	; 138
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	a0 e0       	ldi	r26, 0x00	; 0
 69c:	b0 e0       	ldi	r27, 0x00	; 0
 69e:	31 c0       	rjmp	.+98     	; 0x702 <serial_open+0x13a>
 6a0:	87 e6       	ldi	r24, 0x67	; 103
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	2c c0       	rjmp	.+88     	; 0x702 <serial_open+0x13a>
 6aa:	84 e4       	ldi	r24, 0x44	; 68
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	a0 e0       	ldi	r26, 0x00	; 0
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	27 c0       	rjmp	.+78     	; 0x702 <serial_open+0x13a>
 6b4:	83 e3       	ldi	r24, 0x33	; 51
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	a0 e0       	ldi	r26, 0x00	; 0
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	22 c0       	rjmp	.+68     	; 0x702 <serial_open+0x13a>
 6be:	82 e2       	ldi	r24, 0x22	; 34
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	a0 e0       	ldi	r26, 0x00	; 0
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	1d c0       	rjmp	.+58     	; 0x702 <serial_open+0x13a>
 6c8:	89 e1       	ldi	r24, 0x19	; 25
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	a0 e0       	ldi	r26, 0x00	; 0
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	18 c0       	rjmp	.+48     	; 0x702 <serial_open+0x13a>
 6d2:	80 e1       	ldi	r24, 0x10	; 16
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	a0 e0       	ldi	r26, 0x00	; 0
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	13 c0       	rjmp	.+38     	; 0x702 <serial_open+0x13a>
 6dc:	88 e0       	ldi	r24, 0x08	; 8
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	a0 e0       	ldi	r26, 0x00	; 0
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	0e c0       	rjmp	.+28     	; 0x702 <serial_open+0x13a>
 6e6:	87 e0       	ldi	r24, 0x07	; 7
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	a0 e0       	ldi	r26, 0x00	; 0
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <serial_open+0x13a>
 6f0:	87 e6       	ldi	r24, 0x67	; 103
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	a0 e0       	ldi	r26, 0x00	; 0
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <serial_open+0x13a>
 6fa:	80 e4       	ldi	r24, 0x40	; 64
 6fc:	93 e0       	ldi	r25, 0x03	; 3
 6fe:	a0 e0       	ldi	r26, 0x00	; 0
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	49 2f       	mov	r20, r25
 704:	5a 2f       	mov	r21, r26
 706:	6b 2f       	mov	r22, r27
 708:	77 27       	eor	r23, r23
 70a:	67 fd       	sbrc	r22, 7
 70c:	7a 95       	dec	r23
 70e:	40 93 c5 00 	sts	0x00C5, r20
 712:	80 93 c4 00 	sts	0x00C4, r24
 716:	78 94       	sei
 718:	08 95       	ret

0000071a <serial_write>:

/*
 * Waits for the write buffer to be available, then writes a byte value
 * to the buffer.
 */
void serial_write(char data) {
 71a:	1f 93       	push	r17
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	18 2f       	mov	r17, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {
 722:	80 91 c0 00 	lds	r24, 0x00C0
 726:	85 fd       	sbrc	r24, 5
 728:	06 c0       	rjmp	.+12     	; 0x736 <serial_write+0x1c>
 72a:	c0 ec       	ldi	r28, 0xC0	; 192
 72c:	d0 e0       	ldi	r29, 0x00	; 0
		x_yield();
 72e:	fa dc       	rcall	.-1548   	; 0x124 <x_yield>
 * Waits for the write buffer to be available, then writes a byte value
 * to the buffer.
 */
void serial_write(char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {
 730:	98 81       	ld	r25, Y
 732:	95 ff       	sbrs	r25, 5
 734:	fc cf       	rjmp	.-8      	; 0x72e <serial_write+0x14>
		x_yield();
	}
	/* Put data into buffer, sends the data */
	UDR0 = data;
 736:	10 93 c6 00 	sts	0x00C6, r17
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	08 95       	ret

00000742 <serial_write_string>:

/*
 * Write a whole string to the serial console
 */
void serial_write_string(char* data, int length) {
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
	int i = 0;
	for (; i < length; i ++) {
 74a:	16 16       	cp	r1, r22
 74c:	17 06       	cpc	r1, r23
 74e:	4c f4       	brge	.+18     	; 0x762 <serial_write_string+0x20>
 750:	8c 01       	movw	r16, r24
 752:	ec 01       	movw	r28, r24
 754:	06 0f       	add	r16, r22
 756:	17 1f       	adc	r17, r23
		serial_write(data[i]);
 758:	89 91       	ld	r24, Y+
 75a:	df df       	rcall	.-66     	; 0x71a <serial_write>
/*
 * Write a whole string to the serial console
 */
void serial_write_string(char* data, int length) {
	int i = 0;
	for (; i < length; i ++) {
 75c:	c0 17       	cp	r28, r16
 75e:	d1 07       	cpc	r29, r17
 760:	d9 f7       	brne	.-10     	; 0x758 <serial_write_string+0x16>
		serial_write(data[i]);
	}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>

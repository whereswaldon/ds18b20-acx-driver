
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  00000e84  00000f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800238  00800238  00000f50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad8  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000493  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bad  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a2  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086c  00000000  00000000  000031fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003a6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	78 c1       	rjmp	.+752    	; 0x346 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 37       	cpi	r26, 0x75	; 117
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b2 d1       	rcall	.+868    	; 0x484 <main>
 120:	af c6       	rjmp	.+3422   	; 0xe80 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
		.global x_yield
x_yield:
//------------------------------------------------------------------
// Save "callee-save" registers
//------------------------------------------------------------------
		push	r28
 124:	cf 93       	push	r28
		push	r29
 126:	df 93       	push	r29
		push	r2
 128:	2f 92       	push	r2
		push	r3
 12a:	3f 92       	push	r3
		push	r4
 12c:	4f 92       	push	r4
		push	r5
 12e:	5f 92       	push	r5
		push	r6
 130:	6f 92       	push	r6
		push	r7
 132:	7f 92       	push	r7
		push	r8
 134:	8f 92       	push	r8
		push	r9
 136:	9f 92       	push	r9
		push	r10
 138:	af 92       	push	r10
		push	r11
 13a:	bf 92       	push	r11
		push	r12
 13c:	cf 92       	push	r12
		push	r13
 13e:	df 92       	push	r13
		push	r14
 140:	ef 92       	push	r14
		push	r15
 142:	ff 92       	push	r15
		push	r16
 144:	0f 93       	push	r16
		push	r17
 146:	1f 93       	push	r17

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------

		lds	r20,	x_thread_id
 148:	40 91 38 02 	lds	r20, 0x0238
		lds	r21,	x_thread_mask
 14c:	50 91 70 02 	lds	r21, 0x0270

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 150:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 152:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 154:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 156:	e0 e5       	ldi	r30, 0x50	; 80
		ldi r31,	hi8(stacks)	;load the other byte
 158:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 15a:	e6 0f       	add	r30, r22
		;adc r31,	0			;pull in the carry from previous, if any
		
		;write the SP into the stack save area
		lds	r16,	(0x5d)		;Load SP low byte
 15c:	00 91 5d 00 	lds	r16, 0x005D
		st	Z,		r16			;save SP low byte
 160:	00 83       	st	Z, r16
		lds r16,	(0x5e)		;Load SP high byte
 162:	00 91 5e 00 	lds	r16, 0x005E
		std	Z+1,	r16			;save SP high byte
 166:	01 83       	std	Z+1, r16	; 0x01

00000168 <x_schedule>:
;                         if entered from x_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds r18,	disables	;load the disabled status
 168:	20 91 39 02 	lds	r18, 0x0239
		lds r19,	suspends	;load the suspended status
 16c:	30 91 3b 02 	lds	r19, 0x023B
		or	r18,	r19			;or disables and suspends
 170:	23 2b       	or	r18, r19
		lds r19,	delays		;load the delayed status
 172:	30 91 3a 02 	lds	r19, 0x023A
		or	r18,	r19			;or disables, suspends, and delays
 176:	23 2b       	or	r18, r19

		lds	r20,	x_thread_id	;load the id of the current thread
 178:	40 91 38 02 	lds	r20, 0x0238
		lds r21,	x_thread_mask	;load the thread id mask
 17c:	50 91 70 02 	lds	r21, 0x0270

		ldi	r23,	0			;load loop counter
 180:	70 e0       	ldi	r23, 0x00	; 0

00000182 <loop>:

;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
loop:
		cpi	r23,	8			;compare loop counter to 7
 182:	78 30       	cpi	r23, 0x08	; 8
		breq x_schedule			;if equal, restart scheduling
 184:	89 f3       	breq	.-30     	; 0x168 <x_schedule>
		inc	r20					;increment thread id
 186:	43 95       	inc	r20
		lsl r21					;rotate thread mask left
 188:	55 0f       	add	r21, r21
		cpi	r21,	0			;check if thread mask is zero
 18a:	50 30       	cpi	r21, 0x00	; 0
		brne skip				;jump over second rotate
 18c:	11 f4       	brne	.+4      	; 0x192 <skip>
		inc r21					;reset the thread mask to one
 18e:	53 95       	inc	r21
		ldi	r20,	0			;reset thread id to zero
 190:	40 e0       	ldi	r20, 0x00	; 0

00000192 <skip>:
skip:	
		mov r22,	r21			;copy the thread mask
 192:	65 2f       	mov	r22, r21
		and	r22,	r18			;compare thread mask to or-ed statuses
 194:	62 23       	and	r22, r18
		inc r23					;increment loop counter
 196:	73 95       	inc	r23
		cpi r22,	0			;if the result is zero, this next thread is ready
 198:	60 30       	cpi	r22, 0x00	; 0
		brne loop				;else restart the loop
 19a:	99 f7       	brne	.-26     	; 0x182 <loop>

		jmp	restore				;skip the nap code
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <restore>

0000019e <nap>:
;----------------------------------------------------------
nap:
		; add sleep instructions here...
		;sleep
		;TODO: uncomment & implement
		rjmp	x_schedule			
 19e:	e4 cf       	rjmp	.-56     	; 0x168 <x_schedule>

000001a0 <restore>:
restore:
		;r20 holds thread id
		;r21 holds thread mask

		;set the thread id
		sts x_thread_id,	r20
 1a0:	40 93 38 02 	sts	0x0238, r20
		;set the thread mask
		sts x_thread_mask, r21
 1a4:	50 93 70 02 	sts	0x0270, r21

		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 1a8:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 1aa:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 1ac:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 1ae:	e0 e5       	ldi	r30, 0x50	; 80
		ldi r31,	hi8(stacks)	;load the other byte
 1b0:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 1b2:	e6 0f       	add	r30, r22
		;adc r31,	0			;pull in the carry from previous, if any
		
		// update hardware SP
		ld	r23,	Z+			;load new thread's low SP byte
 1b4:	71 91       	ld	r23, Z+
		ld	r24,	Z			;load new thread's high SP byte
 1b6:	80 81       	ld	r24, Z
		sts	(0x5d),	r23			;change lower SP byte
 1b8:	70 93 5d 00 	sts	0x005D, r23
		sts (0x5e),	r24			;change upper SP byte
 1bc:	80 93 5e 00 	sts	0x005E, r24

		// Restore registers
		pop	r17
 1c0:	1f 91       	pop	r17
		pop	r16
 1c2:	0f 91       	pop	r16
		pop	r15
 1c4:	ff 90       	pop	r15
		pop	r14
 1c6:	ef 90       	pop	r14
		pop	r13
 1c8:	df 90       	pop	r13
		pop	r12
 1ca:	cf 90       	pop	r12
		pop	r11
 1cc:	bf 90       	pop	r11
		pop	r10
 1ce:	af 90       	pop	r10
		pop	r9
 1d0:	9f 90       	pop	r9
		pop	r8
 1d2:	8f 90       	pop	r8
		pop	r7
 1d4:	7f 90       	pop	r7
		pop	r6
 1d6:	6f 90       	pop	r6
		pop	r5
 1d8:	5f 90       	pop	r5
		pop	r4
 1da:	4f 90       	pop	r4
		pop	r3
 1dc:	3f 90       	pop	r3
		pop	r2
 1de:	2f 90       	pop	r2
		pop	r29
 1e0:	df 91       	pop	r29
		pop	r28
 1e2:	cf 91       	pop	r28

		// Return to next thread
		ret
 1e4:	08 95       	ret

000001e6 <x_init>:
	}
	if (tid == x_thread_id) {
		//we've just overwritten the current thread, so reschedule
		x_schedule();
	}
}
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	e0 e5       	ldi	r30, 0x50	; 80
 1ec:	f2 e0       	ldi	r31, 0x02	; 2
 1ee:	8f e7       	ldi	r24, 0x7F	; 127
 1f0:	91 e2       	ldi	r25, 0x21	; 33
 1f2:	91 83       	std	Z+1, r25	; 0x01
 1f4:	80 83       	st	Z, r24
 1f6:	93 83       	std	Z+3, r25	; 0x03
 1f8:	82 83       	std	Z+2, r24	; 0x02
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	90 e2       	ldi	r25, 0x20	; 32
 1fe:	95 83       	std	Z+5, r25	; 0x05
 200:	84 83       	std	Z+4, r24	; 0x04
 202:	97 83       	std	Z+7, r25	; 0x07
 204:	86 83       	std	Z+6, r24	; 0x06
 206:	8f e7       	ldi	r24, 0x7F	; 127
 208:	90 e2       	ldi	r25, 0x20	; 32
 20a:	91 87       	std	Z+9, r25	; 0x09
 20c:	80 87       	std	Z+8, r24	; 0x08
 20e:	93 87       	std	Z+11, r25	; 0x0b
 210:	82 87       	std	Z+10, r24	; 0x0a
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	9f e1       	ldi	r25, 0x1F	; 31
 216:	95 87       	std	Z+13, r25	; 0x0d
 218:	84 87       	std	Z+12, r24	; 0x0c
 21a:	97 87       	std	Z+15, r25	; 0x0f
 21c:	86 87       	std	Z+14, r24	; 0x0e
 21e:	8f e7       	ldi	r24, 0x7F	; 127
 220:	9f e1       	ldi	r25, 0x1F	; 31
 222:	91 8b       	std	Z+17, r25	; 0x11
 224:	80 8b       	std	Z+16, r24	; 0x10
 226:	93 8b       	std	Z+19, r25	; 0x13
 228:	82 8b       	std	Z+18, r24	; 0x12
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	9e e1       	ldi	r25, 0x1E	; 30
 22e:	95 8b       	std	Z+21, r25	; 0x15
 230:	84 8b       	std	Z+20, r24	; 0x14
 232:	97 8b       	std	Z+23, r25	; 0x17
 234:	86 8b       	std	Z+22, r24	; 0x16
 236:	8f e7       	ldi	r24, 0x7F	; 127
 238:	9e e1       	ldi	r25, 0x1E	; 30
 23a:	91 8f       	std	Z+25, r25	; 0x19
 23c:	80 8f       	std	Z+24, r24	; 0x18
 23e:	93 8f       	std	Z+27, r25	; 0x1b
 240:	82 8f       	std	Z+26, r24	; 0x1a
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	9d e1       	ldi	r25, 0x1D	; 29
 246:	95 8f       	std	Z+29, r25	; 0x1d
 248:	84 8f       	std	Z+28, r24	; 0x1c
 24a:	97 8f       	std	Z+31, r25	; 0x1f
 24c:	86 8f       	std	Z+30, r24	; 0x1e
 24e:	8a ea       	ldi	r24, 0xAA	; 170
 250:	80 93 00 21 	sts	0x2100, r24
 254:	80 93 80 20 	sts	0x2080, r24
 258:	80 93 00 20 	sts	0x2000, r24
 25c:	80 93 80 1f 	sts	0x1F80, r24
 260:	80 93 00 1f 	sts	0x1F00, r24
 264:	80 93 80 1e 	sts	0x1E80, r24
 268:	80 93 00 1e 	sts	0x1E00, r24
 26c:	80 93 80 1d 	sts	0x1D80, r24
 270:	10 92 4c 02 	sts	0x024C, r1
 274:	10 92 4d 02 	sts	0x024D, r1
 278:	10 92 4e 02 	sts	0x024E, r1
 27c:	10 92 4f 02 	sts	0x024F, r1
 280:	ec e3       	ldi	r30, 0x3C	; 60
 282:	f2 e0       	ldi	r31, 0x02	; 2
 284:	11 82       	std	Z+1, r1	; 0x01
 286:	10 82       	st	Z, r1
 288:	13 82       	std	Z+3, r1	; 0x03
 28a:	12 82       	std	Z+2, r1	; 0x02
 28c:	15 82       	std	Z+5, r1	; 0x05
 28e:	14 82       	std	Z+4, r1	; 0x04
 290:	17 82       	std	Z+7, r1	; 0x07
 292:	16 82       	std	Z+6, r1	; 0x06
 294:	11 86       	std	Z+9, r1	; 0x09
 296:	10 86       	std	Z+8, r1	; 0x08
 298:	13 86       	std	Z+11, r1	; 0x0b
 29a:	12 86       	std	Z+10, r1	; 0x0a
 29c:	15 86       	std	Z+13, r1	; 0x0d
 29e:	14 86       	std	Z+12, r1	; 0x0c
 2a0:	17 86       	std	Z+15, r1	; 0x0f
 2a2:	16 86       	std	Z+14, r1	; 0x0e
 2a4:	8e ef       	ldi	r24, 0xFE	; 254
 2a6:	80 93 39 02 	sts	0x0239, r24
 2aa:	10 92 3a 02 	sts	0x023A, r1
 2ae:	10 92 3b 02 	sts	0x023B, r1
 2b2:	10 92 38 02 	sts	0x0238, r1
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 70 02 	sts	0x0270, r24
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	84 bd       	out	0x24, r24	; 36
 2c0:	9a ef       	ldi	r25, 0xFA	; 250
 2c2:	97 bd       	out	0x27, r25	; 39
 2c4:	80 93 6e 00 	sts	0x006E, r24
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	85 bd       	out	0x25, r24	; 37
 2cc:	8d b7       	in	r24, 0x3d	; 61
 2ce:	9e b7       	in	r25, 0x3e	; 62
 2d0:	81 15       	cp	r24, r1
 2d2:	92 42       	sbci	r25, 0x22	; 34
 2d4:	b0 f4       	brcc	.+44     	; 0x302 <x_init+0x11c>
 2d6:	a0 e8       	ldi	r26, 0x80	; 128
 2d8:	b1 e2       	ldi	r27, 0x21	; 33
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	92 e2       	ldi	r25, 0x22	; 34
 2de:	c1 e0       	ldi	r28, 0x01	; 1
 2e0:	d2 e2       	ldi	r29, 0x22	; 34
 2e2:	fc 01       	movw	r30, r24
 2e4:	22 91       	ld	r18, -Z
 2e6:	2e 93       	st	-X, r18
 2e8:	be 01       	movw	r22, r28
 2ea:	68 1b       	sub	r22, r24
 2ec:	79 0b       	sbc	r23, r25
 2ee:	9c 01       	movw	r18, r24
 2f0:	22 50       	subi	r18, 0x02	; 2
 2f2:	31 09       	sbc	r19, r1
 2f4:	4d b7       	in	r20, 0x3d	; 61
 2f6:	5e b7       	in	r21, 0x3e	; 62
 2f8:	cf 01       	movw	r24, r30
 2fa:	24 17       	cp	r18, r20
 2fc:	35 07       	cpc	r19, r21
 2fe:	88 f7       	brcc	.-30     	; 0x2e2 <x_init+0xfc>
 300:	02 c0       	rjmp	.+4      	; 0x306 <x_init+0x120>
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	f8 94       	cli
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	91 e2       	ldi	r25, 0x21	; 33
 30c:	86 1b       	sub	r24, r22
 30e:	97 0b       	sbc	r25, r23
 310:	9e bf       	out	0x3e, r25	; 62
 312:	8d bf       	out	0x3d, r24	; 61
 314:	78 94       	sei
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <x_delay>:
 * tick frequency, set at system initialization.
 *
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_delay(int ticks) {
 31c:	9c 01       	movw	r18, r24
	//disable this thread
	delays |= x_thread_mask;
 31e:	80 91 3a 02 	lds	r24, 0x023A
 322:	90 91 70 02 	lds	r25, 0x0270
 326:	98 2b       	or	r25, r24
 328:	90 93 3a 02 	sts	0x023A, r25
	cli(); //disable interrupts
 32c:	f8 94       	cli
	x_thread_delay[x_thread_id] = ticks;
 32e:	e0 91 38 02 	lds	r30, 0x0238
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	e4 5c       	subi	r30, 0xC4	; 196
 33a:	fd 4f       	sbci	r31, 0xFD	; 253
 33c:	31 83       	std	Z+1, r19	; 0x01
 33e:	20 83       	st	Z, r18
	sei(); //enable interrupts
 340:	78 94       	sei
	x_yield(); //reschedule
 342:	f0 ce       	rjmp	.-544    	; 0x124 <x_yield>
 344:	08 95       	ret

00000346 <__vector_21>:
/*
 * The interrupt service routine for timer0.
 * Decrements delays for all threads and enables threads
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	0b b6       	in	r0, 0x3b	; 59
 352:	0f 92       	push	r0
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
 36a:	60 91 3a 02 	lds	r22, 0x023A
	int i = 0;
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
			x_thread_delay[i]--;
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
			//enable this thread
			delays &= ~(0x1 << i);
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	50 e0       	ldi	r21, 0x00	; 0
 */
ISR(TIMER0_COMPA_vect){
	int i = 0;
	for (; i < NUM_THREADS; i++) {
		//if the count is nonzero
		if (x_thread_delay[i] > 0) {
 376:	fc 01       	movw	r30, r24
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	e4 5c       	subi	r30, 0xC4	; 196
 37e:	fd 4f       	sbci	r31, 0xFD	; 253
 380:	20 81       	ld	r18, Z
 382:	31 81       	ldd	r19, Z+1	; 0x01
 384:	23 2b       	or	r18, r19
 386:	59 f0       	breq	.+22     	; 0x39e <__vector_21+0x58>
			//decrement the count
			x_thread_delay[i]--;
 388:	fc 01       	movw	r30, r24
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	e4 5c       	subi	r30, 0xC4	; 196
 390:	fd 4f       	sbci	r31, 0xFD	; 253
 392:	20 81       	ld	r18, Z
 394:	31 81       	ldd	r19, Z+1	; 0x01
 396:	21 50       	subi	r18, 0x01	; 1
 398:	31 09       	sbc	r19, r1
 39a:	31 83       	std	Z+1, r19	; 0x01
 39c:	20 83       	st	Z, r18
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
 39e:	fc 01       	movw	r30, r24
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	e4 5c       	subi	r30, 0xC4	; 196
 3a6:	fd 4f       	sbci	r31, 0xFD	; 253
 3a8:	20 81       	ld	r18, Z
 3aa:	31 81       	ldd	r19, Z+1	; 0x01
 3ac:	23 2b       	or	r18, r19
 3ae:	49 f4       	brne	.+18     	; 0x3c2 <__vector_21+0x7c>
			//enable this thread
			delays &= ~(0x1 << i);
 3b0:	9a 01       	movw	r18, r20
 3b2:	08 2e       	mov	r0, r24
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <__vector_21+0x74>
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <__vector_21+0x70>
 3be:	20 95       	com	r18
 3c0:	62 23       	and	r22, r18
 * Decrements delays for all threads and enables threads
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
	int i = 0;
	for (; i < NUM_THREADS; i++) {
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	88 30       	cpi	r24, 0x08	; 8
 3c6:	91 05       	cpc	r25, r1
 3c8:	b1 f6       	brne	.-84     	; 0x376 <__vector_21+0x30>
 3ca:	60 93 3a 02 	sts	0x023A, r22
		if (x_thread_delay[i] == 0) {
			//enable this thread
			delays &= ~(0x1 << i);
		}
	}
	ticks++;
 3ce:	80 91 4c 02 	lds	r24, 0x024C
 3d2:	90 91 4d 02 	lds	r25, 0x024D
 3d6:	a0 91 4e 02 	lds	r26, 0x024E
 3da:	b0 91 4f 02 	lds	r27, 0x024F
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	a1 1d       	adc	r26, r1
 3e2:	b1 1d       	adc	r27, r1
 3e4:	80 93 4c 02 	sts	0x024C, r24
 3e8:	90 93 4d 02 	sts	0x024D, r25
 3ec:	a0 93 4e 02 	sts	0x024E, r26
 3f0:	b0 93 4f 02 	sts	0x024F, r27
}
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0b be       	out	0x3b, r0	; 59
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <ADC_read>:

#include <avr/io.h>
#include "acx.h"

int ADC_read(byte channel, byte resolution, bool singleEnded) {
	if (resolution != 10 || !singleEnded) {
 418:	6a 30       	cpi	r22, 0x0A	; 10
 41a:	71 f5       	brne	.+92     	; 0x478 <ADC_read+0x60>
 41c:	44 23       	and	r20, r20
 41e:	79 f1       	breq	.+94     	; 0x47e <ADC_read+0x66>
		return -1; //invalid options
	}
	//break the channel into pieces and set the MUX
	char mux40 = channel & 0x0F;
	char mux5 = (channel & 0x10) >> 1; //this shift gives it the correct position within ADCSRB
	ADMUX |= mux40;
 420:	ec e7       	ldi	r30, 0x7C	; 124
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	90 81       	ld	r25, Z
int ADC_read(byte channel, byte resolution, bool singleEnded) {
	if (resolution != 10 || !singleEnded) {
		return -1; //invalid options
	}
	//break the channel into pieces and set the MUX
	char mux40 = channel & 0x0F;
 426:	28 2f       	mov	r18, r24
 428:	2f 70       	andi	r18, 0x0F	; 15
	char mux5 = (channel & 0x10) >> 1; //this shift gives it the correct position within ADCSRB
	ADMUX |= mux40;
 42a:	92 2b       	or	r25, r18
 42c:	90 83       	st	Z, r25
	ADCSRB |= mux5;
 42e:	eb e7       	ldi	r30, 0x7B	; 123
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	20 81       	ld	r18, Z
	if (resolution != 10 || !singleEnded) {
		return -1; //invalid options
	}
	//break the channel into pieces and set the MUX
	char mux40 = channel & 0x0F;
	char mux5 = (channel & 0x10) >> 1; //this shift gives it the correct position within ADCSRB
 434:	98 2f       	mov	r25, r24
 436:	90 71       	andi	r25, 0x10	; 16
 438:	89 2f       	mov	r24, r25
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	95 95       	asr	r25
 43e:	87 95       	ror	r24
	ADMUX |= mux40;
	ADCSRB |= mux5;
 440:	82 2b       	or	r24, r18
 442:	80 83       	st	Z, r24
	
	ADCSRA |= 0x1 << ADEN; //enable conversion
 444:	ea e7       	ldi	r30, 0x7A	; 122
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	80 83       	st	Z, r24
	
	ADCSRA |= 0x1 << ADSC; //start single conversion
 44e:	80 81       	ld	r24, Z
 450:	80 64       	ori	r24, 0x40	; 64
 452:	80 83       	st	Z, r24
	
	while (ADCSRA & 0x1 << ADSC) {
 454:	80 81       	ld	r24, Z
 456:	86 fd       	sbrc	r24, 6
 458:	fd cf       	rjmp	.-6      	; 0x454 <ADC_read+0x3c>
		//busy wait for bit to clear (indicates conversion complete)
	}
	byte low = ADCL;
 45a:	20 91 78 00 	lds	r18, 0x0078
	byte high = ADCH;
 45e:	80 91 79 00 	lds	r24, 0x0079
	
	ADCSRA ^= 0x1 << ADEN; //disable conversion
 462:	ea e7       	ldi	r30, 0x7A	; 122
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	90 81       	ld	r25, Z
 468:	90 58       	subi	r25, 0x80	; 128
 46a:	90 83       	st	Z, r25
	
	return (((int) high) << 8) + low; //attach two bytes together
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	98 2f       	mov	r25, r24
 470:	88 27       	eor	r24, r24
 472:	82 0f       	add	r24, r18
 474:	91 1d       	adc	r25, r1
 476:	08 95       	ret
#include <avr/io.h>
#include "acx.h"

int ADC_read(byte channel, byte resolution, bool singleEnded) {
	if (resolution != 10 || !singleEnded) {
		return -1; //invalid options
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	9f ef       	ldi	r25, 0xFF	; 255
 47c:	08 95       	ret
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	9f ef       	ldi	r25, 0xFF	; 255
	byte high = ADCH;
	
	ADCSRA ^= 0x1 << ADEN; //disable conversion
	
	return (((int) high) << 8) + low; //attach two bytes together
 482:	08 95       	ret

00000484 <main>:
/*
 * Kick off the whole shabang
 */
int main(void)
{
	x_init();
 484:	b0 de       	rcall	.-672    	; 0x1e6 <x_init>
	serial_open(19200, SERIAL_8N1);
 486:	46 e0       	ldi	r20, 0x06	; 6
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	7b e4       	ldi	r23, 0x4B	; 75
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	2e d0       	rcall	.+92     	; 0x4f0 <serial_open>
	int value;
	char * message;
	message = (char *) malloc(64);
 494:	80 e4       	ldi	r24, 0x40	; 64
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	fd d0       	rcall	.+506    	; 0x694 <malloc>
 49a:	d8 2f       	mov	r29, r24
 49c:	c9 2f       	mov	r28, r25
	while(1){
		serial_write_string("hello\n\r", strlen("hello\n\r"));
		value = ADC_read(0, 10, 1);
		sprintf(message,"%x\n\r", value);
 49e:	02 e3       	ldi	r16, 0x32	; 50
 4a0:	12 e0       	ldi	r17, 0x02	; 2
	serial_open(19200, SERIAL_8N1);
	int value;
	char * message;
	message = (char *) malloc(64);
	while(1){
		serial_write_string("hello\n\r", strlen("hello\n\r"));
 4a2:	67 e0       	ldi	r22, 0x07	; 7
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	8a e2       	ldi	r24, 0x2A	; 42
 4a8:	92 e0       	ldi	r25, 0x02	; 2
 4aa:	df d0       	rcall	.+446    	; 0x66a <serial_write_string>
		value = ADC_read(0, 10, 1);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	6a e0       	ldi	r22, 0x0A	; 10
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	b2 df       	rcall	.-156    	; 0x418 <ADC_read>
		sprintf(message,"%x\n\r", value);
 4b4:	9f 93       	push	r25
 4b6:	8f 93       	push	r24
 4b8:	1f 93       	push	r17
 4ba:	0f 93       	push	r16
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	16 d2       	rcall	.+1068   	; 0x8ee <sprintf>
		serial_write_string(message, strlen(message));
 4c2:	ad 2f       	mov	r26, r29
 4c4:	bc 2f       	mov	r27, r28
 4c6:	fd 01       	movw	r30, r26
 4c8:	01 90       	ld	r0, Z+
 4ca:	00 20       	and	r0, r0
 4cc:	e9 f7       	brne	.-6      	; 0x4c8 <main+0x44>
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	bf 01       	movw	r22, r30
 4d2:	6a 1b       	sub	r22, r26
 4d4:	7b 0b       	sbc	r23, r27
 4d6:	8d 2f       	mov	r24, r29
 4d8:	9c 2f       	mov	r25, r28
 4da:	c7 d0       	rcall	.+398    	; 0x66a <serial_write_string>
		x_delay(1000);
 4dc:	88 ee       	ldi	r24, 0xE8	; 232
 4de:	93 e0       	ldi	r25, 0x03	; 3
 4e0:	1d df       	rcall	.-454    	; 0x31c <x_delay>
	}
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	d9 cf       	rjmp	.-78     	; 0x4a2 <main+0x1e>

000004f0 <serial_open>:
	while ( !(UCSR0A & (1<<RXC0)) ) {
		x_yield();
	}
	/* Get and return received data from buffer */
	return UDR0;
}
 4f0:	f8 94       	cli
 4f2:	40 93 c2 00 	sts	0x00C2, r20
 4f6:	28 e1       	ldi	r18, 0x18	; 24
 4f8:	20 93 c1 00 	sts	0x00C1, r18
 4fc:	e0 ec       	ldi	r30, 0xC0	; 192
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	20 81       	ld	r18, Z
 502:	22 60       	ori	r18, 0x02	; 2
 504:	20 83       	st	Z, r18
 506:	60 38       	cpi	r22, 0x80	; 128
 508:	20 e7       	ldi	r18, 0x70	; 112
 50a:	72 07       	cpc	r23, r18
 50c:	81 05       	cpc	r24, r1
 50e:	91 05       	cpc	r25, r1
 510:	09 f4       	brne	.+2      	; 0x514 <serial_open+0x24>
 512:	5f c0       	rjmp	.+190    	; 0x5d2 <serial_open+0xe2>
 514:	0c f5       	brge	.+66     	; 0x558 <serial_open+0x68>
 516:	60 38       	cpi	r22, 0x80	; 128
 518:	25 e2       	ldi	r18, 0x25	; 37
 51a:	72 07       	cpc	r23, r18
 51c:	81 05       	cpc	r24, r1
 51e:	91 05       	cpc	r25, r1
 520:	09 f4       	brne	.+2      	; 0x524 <serial_open+0x34>
 522:	48 c0       	rjmp	.+144    	; 0x5b4 <serial_open+0xc4>
 524:	6c f4       	brge	.+26     	; 0x540 <serial_open+0x50>
 526:	60 36       	cpi	r22, 0x60	; 96
 528:	29 e0       	ldi	r18, 0x09	; 9
 52a:	72 07       	cpc	r23, r18
 52c:	81 05       	cpc	r24, r1
 52e:	91 05       	cpc	r25, r1
 530:	09 f4       	brne	.+2      	; 0x534 <serial_open+0x44>
 532:	77 c0       	rjmp	.+238    	; 0x622 <serial_open+0x132>
 534:	60 3c       	cpi	r22, 0xC0	; 192
 536:	72 41       	sbci	r23, 0x12	; 18
 538:	81 05       	cpc	r24, r1
 53a:	91 05       	cpc	r25, r1
 53c:	b1 f1       	breq	.+108    	; 0x5aa <serial_open+0xba>
 53e:	6c c0       	rjmp	.+216    	; 0x618 <serial_open+0x128>
 540:	60 34       	cpi	r22, 0x40	; 64
 542:	28 e3       	ldi	r18, 0x38	; 56
 544:	72 07       	cpc	r23, r18
 546:	81 05       	cpc	r24, r1
 548:	91 05       	cpc	r25, r1
 54a:	c9 f1       	breq	.+114    	; 0x5be <serial_open+0xce>
 54c:	61 15       	cp	r22, r1
 54e:	7b 44       	sbci	r23, 0x4B	; 75
 550:	81 05       	cpc	r24, r1
 552:	91 05       	cpc	r25, r1
 554:	c9 f1       	breq	.+114    	; 0x5c8 <serial_open+0xd8>
 556:	60 c0       	rjmp	.+192    	; 0x618 <serial_open+0x128>
 558:	61 15       	cp	r22, r1
 55a:	2c e2       	ldi	r18, 0x2C	; 44
 55c:	72 07       	cpc	r23, r18
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	82 07       	cpc	r24, r18
 562:	91 05       	cpc	r25, r1
 564:	09 f4       	brne	.+2      	; 0x568 <serial_open+0x78>
 566:	44 c0       	rjmp	.+136    	; 0x5f0 <serial_open+0x100>
 568:	64 f4       	brge	.+24     	; 0x582 <serial_open+0x92>
 56a:	61 15       	cp	r22, r1
 56c:	26 e9       	ldi	r18, 0x96	; 150
 56e:	72 07       	cpc	r23, r18
 570:	81 05       	cpc	r24, r1
 572:	91 05       	cpc	r25, r1
 574:	99 f1       	breq	.+102    	; 0x5dc <serial_open+0xec>
 576:	61 15       	cp	r22, r1
 578:	71 4e       	sbci	r23, 0xE1	; 225
 57a:	81 05       	cpc	r24, r1
 57c:	91 05       	cpc	r25, r1
 57e:	99 f1       	breq	.+102    	; 0x5e6 <serial_open+0xf6>
 580:	4b c0       	rjmp	.+150    	; 0x618 <serial_open+0x128>
 582:	61 15       	cp	r22, r1
 584:	24 e8       	ldi	r18, 0x84	; 132
 586:	72 07       	cpc	r23, r18
 588:	23 e0       	ldi	r18, 0x03	; 3
 58a:	82 07       	cpc	r24, r18
 58c:	91 05       	cpc	r25, r1
 58e:	d1 f1       	breq	.+116    	; 0x604 <serial_open+0x114>
 590:	60 39       	cpi	r22, 0x90	; 144
 592:	20 ed       	ldi	r18, 0xD0	; 208
 594:	72 07       	cpc	r23, r18
 596:	23 e0       	ldi	r18, 0x03	; 3
 598:	82 07       	cpc	r24, r18
 59a:	91 05       	cpc	r25, r1
 59c:	c1 f1       	breq	.+112    	; 0x60e <serial_open+0x11e>
 59e:	61 15       	cp	r22, r1
 5a0:	72 4c       	sbci	r23, 0xC2	; 194
 5a2:	81 40       	sbci	r24, 0x01	; 1
 5a4:	91 05       	cpc	r25, r1
 5a6:	c1 f5       	brne	.+112    	; 0x618 <serial_open+0x128>
 5a8:	28 c0       	rjmp	.+80     	; 0x5fa <serial_open+0x10a>
 5aa:	80 ea       	ldi	r24, 0xA0	; 160
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	a0 e0       	ldi	r26, 0x00	; 0
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	3b c0       	rjmp	.+118    	; 0x62a <serial_open+0x13a>
 5b4:	8f ec       	ldi	r24, 0xCF	; 207
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	a0 e0       	ldi	r26, 0x00	; 0
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	36 c0       	rjmp	.+108    	; 0x62a <serial_open+0x13a>
 5be:	8a e8       	ldi	r24, 0x8A	; 138
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	a0 e0       	ldi	r26, 0x00	; 0
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	31 c0       	rjmp	.+98     	; 0x62a <serial_open+0x13a>
 5c8:	87 e6       	ldi	r24, 0x67	; 103
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	a0 e0       	ldi	r26, 0x00	; 0
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	2c c0       	rjmp	.+88     	; 0x62a <serial_open+0x13a>
 5d2:	84 e4       	ldi	r24, 0x44	; 68
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	a0 e0       	ldi	r26, 0x00	; 0
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	27 c0       	rjmp	.+78     	; 0x62a <serial_open+0x13a>
 5dc:	83 e3       	ldi	r24, 0x33	; 51
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	a0 e0       	ldi	r26, 0x00	; 0
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	22 c0       	rjmp	.+68     	; 0x62a <serial_open+0x13a>
 5e6:	82 e2       	ldi	r24, 0x22	; 34
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a0 e0       	ldi	r26, 0x00	; 0
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	1d c0       	rjmp	.+58     	; 0x62a <serial_open+0x13a>
 5f0:	89 e1       	ldi	r24, 0x19	; 25
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	18 c0       	rjmp	.+48     	; 0x62a <serial_open+0x13a>
 5fa:	80 e1       	ldi	r24, 0x10	; 16
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	a0 e0       	ldi	r26, 0x00	; 0
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	13 c0       	rjmp	.+38     	; 0x62a <serial_open+0x13a>
 604:	88 e0       	ldi	r24, 0x08	; 8
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	a0 e0       	ldi	r26, 0x00	; 0
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	0e c0       	rjmp	.+28     	; 0x62a <serial_open+0x13a>
 60e:	87 e0       	ldi	r24, 0x07	; 7
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	a0 e0       	ldi	r26, 0x00	; 0
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	09 c0       	rjmp	.+18     	; 0x62a <serial_open+0x13a>
 618:	87 e6       	ldi	r24, 0x67	; 103
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	a0 e0       	ldi	r26, 0x00	; 0
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	04 c0       	rjmp	.+8      	; 0x62a <serial_open+0x13a>
 622:	80 e4       	ldi	r24, 0x40	; 64
 624:	93 e0       	ldi	r25, 0x03	; 3
 626:	a0 e0       	ldi	r26, 0x00	; 0
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	49 2f       	mov	r20, r25
 62c:	5a 2f       	mov	r21, r26
 62e:	6b 2f       	mov	r22, r27
 630:	77 27       	eor	r23, r23
 632:	67 fd       	sbrc	r22, 7
 634:	7a 95       	dec	r23
 636:	40 93 c5 00 	sts	0x00C5, r20
 63a:	80 93 c4 00 	sts	0x00C4, r24
 63e:	78 94       	sei
 640:	08 95       	ret

00000642 <serial_write>:

/*
 * Waits for the write buffer to be available, then writes a byte value
 * to the buffer.
 */
void serial_write(char data) {
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	18 2f       	mov	r17, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {
 64a:	80 91 c0 00 	lds	r24, 0x00C0
 64e:	85 fd       	sbrc	r24, 5
 650:	06 c0       	rjmp	.+12     	; 0x65e <serial_write+0x1c>
 652:	c0 ec       	ldi	r28, 0xC0	; 192
 654:	d0 e0       	ldi	r29, 0x00	; 0
		x_yield();
 656:	66 dd       	rcall	.-1332   	; 0x124 <x_yield>
 * Waits for the write buffer to be available, then writes a byte value
 * to the buffer.
 */
void serial_write(char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) {
 658:	98 81       	ld	r25, Y
 65a:	95 ff       	sbrs	r25, 5
 65c:	fc cf       	rjmp	.-8      	; 0x656 <serial_write+0x14>
		x_yield();
	}
	/* Put data into buffer, sends the data */
	UDR0 = data;
 65e:	10 93 c6 00 	sts	0x00C6, r17
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	08 95       	ret

0000066a <serial_write_string>:

/*
 * Write a whole string to the serial console
 */
void serial_write_string(char* data, int length) {
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
	int i = 0;
	for (; i < length; i ++) {
 672:	16 16       	cp	r1, r22
 674:	17 06       	cpc	r1, r23
 676:	4c f4       	brge	.+18     	; 0x68a <serial_write_string+0x20>
 678:	8c 01       	movw	r16, r24
 67a:	ec 01       	movw	r28, r24
 67c:	06 0f       	add	r16, r22
 67e:	17 1f       	adc	r17, r23
		serial_write(data[i]);
 680:	89 91       	ld	r24, Y+
 682:	df df       	rcall	.-66     	; 0x642 <serial_write>
/*
 * Write a whole string to the serial console
 */
void serial_write_string(char* data, int length) {
	int i = 0;
	for (; i < length; i ++) {
 684:	c0 17       	cp	r28, r16
 686:	d1 07       	cpc	r29, r17
 688:	d9 f7       	brne	.-10     	; 0x680 <serial_write_string+0x16>
		serial_write(data[i]);
	}
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <malloc>:
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	91 05       	cpc	r25, r1
 69c:	10 f4       	brcc	.+4      	; 0x6a2 <malloc+0xe>
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	e0 91 73 02 	lds	r30, 0x0273
 6a6:	f0 91 74 02 	lds	r31, 0x0274
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	c0 e0       	ldi	r28, 0x00	; 0
 6b0:	d0 e0       	ldi	r29, 0x00	; 0
 6b2:	30 97       	sbiw	r30, 0x00	; 0
 6b4:	11 f1       	breq	.+68     	; 0x6fa <malloc+0x66>
 6b6:	40 81       	ld	r20, Z
 6b8:	51 81       	ldd	r21, Z+1	; 0x01
 6ba:	48 17       	cp	r20, r24
 6bc:	59 07       	cpc	r21, r25
 6be:	c0 f0       	brcs	.+48     	; 0x6f0 <malloc+0x5c>
 6c0:	48 17       	cp	r20, r24
 6c2:	59 07       	cpc	r21, r25
 6c4:	61 f4       	brne	.+24     	; 0x6de <malloc+0x4a>
 6c6:	82 81       	ldd	r24, Z+2	; 0x02
 6c8:	93 81       	ldd	r25, Z+3	; 0x03
 6ca:	20 97       	sbiw	r28, 0x00	; 0
 6cc:	19 f0       	breq	.+6      	; 0x6d4 <malloc+0x40>
 6ce:	9b 83       	std	Y+3, r25	; 0x03
 6d0:	8a 83       	std	Y+2, r24	; 0x02
 6d2:	2b c0       	rjmp	.+86     	; 0x72a <malloc+0x96>
 6d4:	90 93 74 02 	sts	0x0274, r25
 6d8:	80 93 73 02 	sts	0x0273, r24
 6dc:	26 c0       	rjmp	.+76     	; 0x72a <malloc+0x96>
 6de:	21 15       	cp	r18, r1
 6e0:	31 05       	cpc	r19, r1
 6e2:	19 f0       	breq	.+6      	; 0x6ea <malloc+0x56>
 6e4:	42 17       	cp	r20, r18
 6e6:	53 07       	cpc	r21, r19
 6e8:	18 f4       	brcc	.+6      	; 0x6f0 <malloc+0x5c>
 6ea:	9a 01       	movw	r18, r20
 6ec:	be 01       	movw	r22, r28
 6ee:	df 01       	movw	r26, r30
 6f0:	ef 01       	movw	r28, r30
 6f2:	02 80       	ldd	r0, Z+2	; 0x02
 6f4:	f3 81       	ldd	r31, Z+3	; 0x03
 6f6:	e0 2d       	mov	r30, r0
 6f8:	dc cf       	rjmp	.-72     	; 0x6b2 <malloc+0x1e>
 6fa:	21 15       	cp	r18, r1
 6fc:	31 05       	cpc	r19, r1
 6fe:	09 f1       	breq	.+66     	; 0x742 <malloc+0xae>
 700:	28 1b       	sub	r18, r24
 702:	39 0b       	sbc	r19, r25
 704:	24 30       	cpi	r18, 0x04	; 4
 706:	31 05       	cpc	r19, r1
 708:	90 f4       	brcc	.+36     	; 0x72e <malloc+0x9a>
 70a:	12 96       	adiw	r26, 0x02	; 2
 70c:	8d 91       	ld	r24, X+
 70e:	9c 91       	ld	r25, X
 710:	13 97       	sbiw	r26, 0x03	; 3
 712:	61 15       	cp	r22, r1
 714:	71 05       	cpc	r23, r1
 716:	21 f0       	breq	.+8      	; 0x720 <malloc+0x8c>
 718:	fb 01       	movw	r30, r22
 71a:	93 83       	std	Z+3, r25	; 0x03
 71c:	82 83       	std	Z+2, r24	; 0x02
 71e:	04 c0       	rjmp	.+8      	; 0x728 <malloc+0x94>
 720:	90 93 74 02 	sts	0x0274, r25
 724:	80 93 73 02 	sts	0x0273, r24
 728:	fd 01       	movw	r30, r26
 72a:	32 96       	adiw	r30, 0x02	; 2
 72c:	44 c0       	rjmp	.+136    	; 0x7b6 <malloc+0x122>
 72e:	fd 01       	movw	r30, r26
 730:	e2 0f       	add	r30, r18
 732:	f3 1f       	adc	r31, r19
 734:	81 93       	st	Z+, r24
 736:	91 93       	st	Z+, r25
 738:	22 50       	subi	r18, 0x02	; 2
 73a:	31 09       	sbc	r19, r1
 73c:	2d 93       	st	X+, r18
 73e:	3c 93       	st	X, r19
 740:	3a c0       	rjmp	.+116    	; 0x7b6 <malloc+0x122>
 742:	20 91 71 02 	lds	r18, 0x0271
 746:	30 91 72 02 	lds	r19, 0x0272
 74a:	23 2b       	or	r18, r19
 74c:	41 f4       	brne	.+16     	; 0x75e <malloc+0xca>
 74e:	20 91 02 02 	lds	r18, 0x0202
 752:	30 91 03 02 	lds	r19, 0x0203
 756:	30 93 72 02 	sts	0x0272, r19
 75a:	20 93 71 02 	sts	0x0271, r18
 75e:	20 91 00 02 	lds	r18, 0x0200
 762:	30 91 01 02 	lds	r19, 0x0201
 766:	21 15       	cp	r18, r1
 768:	31 05       	cpc	r19, r1
 76a:	41 f4       	brne	.+16     	; 0x77c <malloc+0xe8>
 76c:	2d b7       	in	r18, 0x3d	; 61
 76e:	3e b7       	in	r19, 0x3e	; 62
 770:	40 91 04 02 	lds	r20, 0x0204
 774:	50 91 05 02 	lds	r21, 0x0205
 778:	24 1b       	sub	r18, r20
 77a:	35 0b       	sbc	r19, r21
 77c:	e0 91 71 02 	lds	r30, 0x0271
 780:	f0 91 72 02 	lds	r31, 0x0272
 784:	e2 17       	cp	r30, r18
 786:	f3 07       	cpc	r31, r19
 788:	a0 f4       	brcc	.+40     	; 0x7b2 <malloc+0x11e>
 78a:	2e 1b       	sub	r18, r30
 78c:	3f 0b       	sbc	r19, r31
 78e:	28 17       	cp	r18, r24
 790:	39 07       	cpc	r19, r25
 792:	78 f0       	brcs	.+30     	; 0x7b2 <malloc+0x11e>
 794:	ac 01       	movw	r20, r24
 796:	4e 5f       	subi	r20, 0xFE	; 254
 798:	5f 4f       	sbci	r21, 0xFF	; 255
 79a:	24 17       	cp	r18, r20
 79c:	35 07       	cpc	r19, r21
 79e:	48 f0       	brcs	.+18     	; 0x7b2 <malloc+0x11e>
 7a0:	4e 0f       	add	r20, r30
 7a2:	5f 1f       	adc	r21, r31
 7a4:	50 93 72 02 	sts	0x0272, r21
 7a8:	40 93 71 02 	sts	0x0271, r20
 7ac:	81 93       	st	Z+, r24
 7ae:	91 93       	st	Z+, r25
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <malloc+0x122>
 7b2:	e0 e0       	ldi	r30, 0x00	; 0
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	cf 01       	movw	r24, r30
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	08 95       	ret

000007be <free>:
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	09 f4       	brne	.+2      	; 0x7cc <free+0xe>
 7ca:	8c c0       	rjmp	.+280    	; 0x8e4 <free+0x126>
 7cc:	fc 01       	movw	r30, r24
 7ce:	32 97       	sbiw	r30, 0x02	; 2
 7d0:	13 82       	std	Z+3, r1	; 0x03
 7d2:	12 82       	std	Z+2, r1	; 0x02
 7d4:	00 91 73 02 	lds	r16, 0x0273
 7d8:	10 91 74 02 	lds	r17, 0x0274
 7dc:	01 15       	cp	r16, r1
 7de:	11 05       	cpc	r17, r1
 7e0:	81 f4       	brne	.+32     	; 0x802 <free+0x44>
 7e2:	20 81       	ld	r18, Z
 7e4:	31 81       	ldd	r19, Z+1	; 0x01
 7e6:	82 0f       	add	r24, r18
 7e8:	93 1f       	adc	r25, r19
 7ea:	20 91 71 02 	lds	r18, 0x0271
 7ee:	30 91 72 02 	lds	r19, 0x0272
 7f2:	28 17       	cp	r18, r24
 7f4:	39 07       	cpc	r19, r25
 7f6:	79 f5       	brne	.+94     	; 0x856 <free+0x98>
 7f8:	f0 93 72 02 	sts	0x0272, r31
 7fc:	e0 93 71 02 	sts	0x0271, r30
 800:	71 c0       	rjmp	.+226    	; 0x8e4 <free+0x126>
 802:	d8 01       	movw	r26, r16
 804:	40 e0       	ldi	r20, 0x00	; 0
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	ae 17       	cp	r26, r30
 80a:	bf 07       	cpc	r27, r31
 80c:	50 f4       	brcc	.+20     	; 0x822 <free+0x64>
 80e:	12 96       	adiw	r26, 0x02	; 2
 810:	2d 91       	ld	r18, X+
 812:	3c 91       	ld	r19, X
 814:	13 97       	sbiw	r26, 0x03	; 3
 816:	ad 01       	movw	r20, r26
 818:	21 15       	cp	r18, r1
 81a:	31 05       	cpc	r19, r1
 81c:	09 f1       	breq	.+66     	; 0x860 <free+0xa2>
 81e:	d9 01       	movw	r26, r18
 820:	f3 cf       	rjmp	.-26     	; 0x808 <free+0x4a>
 822:	9d 01       	movw	r18, r26
 824:	da 01       	movw	r26, r20
 826:	33 83       	std	Z+3, r19	; 0x03
 828:	22 83       	std	Z+2, r18	; 0x02
 82a:	60 81       	ld	r22, Z
 82c:	71 81       	ldd	r23, Z+1	; 0x01
 82e:	86 0f       	add	r24, r22
 830:	97 1f       	adc	r25, r23
 832:	82 17       	cp	r24, r18
 834:	93 07       	cpc	r25, r19
 836:	69 f4       	brne	.+26     	; 0x852 <free+0x94>
 838:	ec 01       	movw	r28, r24
 83a:	28 81       	ld	r18, Y
 83c:	39 81       	ldd	r19, Y+1	; 0x01
 83e:	26 0f       	add	r18, r22
 840:	37 1f       	adc	r19, r23
 842:	2e 5f       	subi	r18, 0xFE	; 254
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	31 83       	std	Z+1, r19	; 0x01
 848:	20 83       	st	Z, r18
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	9b 81       	ldd	r25, Y+3	; 0x03
 84e:	93 83       	std	Z+3, r25	; 0x03
 850:	82 83       	std	Z+2, r24	; 0x02
 852:	45 2b       	or	r20, r21
 854:	29 f4       	brne	.+10     	; 0x860 <free+0xa2>
 856:	f0 93 74 02 	sts	0x0274, r31
 85a:	e0 93 73 02 	sts	0x0273, r30
 85e:	42 c0       	rjmp	.+132    	; 0x8e4 <free+0x126>
 860:	13 96       	adiw	r26, 0x03	; 3
 862:	fc 93       	st	X, r31
 864:	ee 93       	st	-X, r30
 866:	12 97       	sbiw	r26, 0x02	; 2
 868:	ed 01       	movw	r28, r26
 86a:	49 91       	ld	r20, Y+
 86c:	59 91       	ld	r21, Y+
 86e:	9e 01       	movw	r18, r28
 870:	24 0f       	add	r18, r20
 872:	35 1f       	adc	r19, r21
 874:	e2 17       	cp	r30, r18
 876:	f3 07       	cpc	r31, r19
 878:	71 f4       	brne	.+28     	; 0x896 <free+0xd8>
 87a:	80 81       	ld	r24, Z
 87c:	91 81       	ldd	r25, Z+1	; 0x01
 87e:	84 0f       	add	r24, r20
 880:	95 1f       	adc	r25, r21
 882:	02 96       	adiw	r24, 0x02	; 2
 884:	11 96       	adiw	r26, 0x01	; 1
 886:	9c 93       	st	X, r25
 888:	8e 93       	st	-X, r24
 88a:	82 81       	ldd	r24, Z+2	; 0x02
 88c:	93 81       	ldd	r25, Z+3	; 0x03
 88e:	13 96       	adiw	r26, 0x03	; 3
 890:	9c 93       	st	X, r25
 892:	8e 93       	st	-X, r24
 894:	12 97       	sbiw	r26, 0x02	; 2
 896:	e0 e0       	ldi	r30, 0x00	; 0
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	d8 01       	movw	r26, r16
 89c:	12 96       	adiw	r26, 0x02	; 2
 89e:	8d 91       	ld	r24, X+
 8a0:	9c 91       	ld	r25, X
 8a2:	13 97       	sbiw	r26, 0x03	; 3
 8a4:	00 97       	sbiw	r24, 0x00	; 0
 8a6:	19 f0       	breq	.+6      	; 0x8ae <free+0xf0>
 8a8:	f8 01       	movw	r30, r16
 8aa:	8c 01       	movw	r16, r24
 8ac:	f6 cf       	rjmp	.-20     	; 0x89a <free+0xdc>
 8ae:	8d 91       	ld	r24, X+
 8b0:	9c 91       	ld	r25, X
 8b2:	98 01       	movw	r18, r16
 8b4:	2e 5f       	subi	r18, 0xFE	; 254
 8b6:	3f 4f       	sbci	r19, 0xFF	; 255
 8b8:	82 0f       	add	r24, r18
 8ba:	93 1f       	adc	r25, r19
 8bc:	20 91 71 02 	lds	r18, 0x0271
 8c0:	30 91 72 02 	lds	r19, 0x0272
 8c4:	28 17       	cp	r18, r24
 8c6:	39 07       	cpc	r19, r25
 8c8:	69 f4       	brne	.+26     	; 0x8e4 <free+0x126>
 8ca:	30 97       	sbiw	r30, 0x00	; 0
 8cc:	29 f4       	brne	.+10     	; 0x8d8 <free+0x11a>
 8ce:	10 92 74 02 	sts	0x0274, r1
 8d2:	10 92 73 02 	sts	0x0273, r1
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <free+0x11e>
 8d8:	13 82       	std	Z+3, r1	; 0x03
 8da:	12 82       	std	Z+2, r1	; 0x02
 8dc:	10 93 72 02 	sts	0x0272, r17
 8e0:	00 93 71 02 	sts	0x0271, r16
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	1f 91       	pop	r17
 8ea:	0f 91       	pop	r16
 8ec:	08 95       	ret

000008ee <sprintf>:
 8ee:	0f 93       	push	r16
 8f0:	1f 93       	push	r17
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	2e 97       	sbiw	r28, 0x0e	; 14
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	de bf       	out	0x3e, r29	; 62
 902:	0f be       	out	0x3f, r0	; 63
 904:	cd bf       	out	0x3d, r28	; 61
 906:	0e 89       	ldd	r16, Y+22	; 0x16
 908:	1f 89       	ldd	r17, Y+23	; 0x17
 90a:	86 e0       	ldi	r24, 0x06	; 6
 90c:	8c 83       	std	Y+4, r24	; 0x04
 90e:	1a 83       	std	Y+2, r17	; 0x02
 910:	09 83       	std	Y+1, r16	; 0x01
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	9f e7       	ldi	r25, 0x7F	; 127
 916:	9e 83       	std	Y+6, r25	; 0x06
 918:	8d 83       	std	Y+5, r24	; 0x05
 91a:	ae 01       	movw	r20, r28
 91c:	46 5e       	subi	r20, 0xE6	; 230
 91e:	5f 4f       	sbci	r21, 0xFF	; 255
 920:	68 8d       	ldd	r22, Y+24	; 0x18
 922:	79 8d       	ldd	r23, Y+25	; 0x19
 924:	ce 01       	movw	r24, r28
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	11 d0       	rcall	.+34     	; 0x94c <vfprintf>
 92a:	2f 81       	ldd	r18, Y+7	; 0x07
 92c:	38 85       	ldd	r19, Y+8	; 0x08
 92e:	f8 01       	movw	r30, r16
 930:	e2 0f       	add	r30, r18
 932:	f3 1f       	adc	r31, r19
 934:	10 82       	st	Z, r1
 936:	2e 96       	adiw	r28, 0x0e	; 14
 938:	0f b6       	in	r0, 0x3f	; 63
 93a:	f8 94       	cli
 93c:	de bf       	out	0x3e, r29	; 62
 93e:	0f be       	out	0x3f, r0	; 63
 940:	cd bf       	out	0x3d, r28	; 61
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	1f 91       	pop	r17
 948:	0f 91       	pop	r16
 94a:	08 95       	ret

0000094c <vfprintf>:
 94c:	2f 92       	push	r2
 94e:	3f 92       	push	r3
 950:	4f 92       	push	r4
 952:	5f 92       	push	r5
 954:	6f 92       	push	r6
 956:	7f 92       	push	r7
 958:	8f 92       	push	r8
 95a:	9f 92       	push	r9
 95c:	af 92       	push	r10
 95e:	bf 92       	push	r11
 960:	cf 92       	push	r12
 962:	df 92       	push	r13
 964:	ef 92       	push	r14
 966:	ff 92       	push	r15
 968:	0f 93       	push	r16
 96a:	1f 93       	push	r17
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
 974:	2c 97       	sbiw	r28, 0x0c	; 12
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	f8 94       	cli
 97a:	de bf       	out	0x3e, r29	; 62
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	cd bf       	out	0x3d, r28	; 61
 980:	7c 01       	movw	r14, r24
 982:	6b 01       	movw	r12, r22
 984:	8a 01       	movw	r16, r20
 986:	fc 01       	movw	r30, r24
 988:	17 82       	std	Z+7, r1	; 0x07
 98a:	16 82       	std	Z+6, r1	; 0x06
 98c:	83 81       	ldd	r24, Z+3	; 0x03
 98e:	81 ff       	sbrs	r24, 1
 990:	b0 c1       	rjmp	.+864    	; 0xcf2 <vfprintf+0x3a6>
 992:	ce 01       	movw	r24, r28
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	4c 01       	movw	r8, r24
 998:	f7 01       	movw	r30, r14
 99a:	93 81       	ldd	r25, Z+3	; 0x03
 99c:	f6 01       	movw	r30, r12
 99e:	93 fd       	sbrc	r25, 3
 9a0:	85 91       	lpm	r24, Z+
 9a2:	93 ff       	sbrs	r25, 3
 9a4:	81 91       	ld	r24, Z+
 9a6:	6f 01       	movw	r12, r30
 9a8:	88 23       	and	r24, r24
 9aa:	09 f4       	brne	.+2      	; 0x9ae <vfprintf+0x62>
 9ac:	9e c1       	rjmp	.+828    	; 0xcea <vfprintf+0x39e>
 9ae:	85 32       	cpi	r24, 0x25	; 37
 9b0:	39 f4       	brne	.+14     	; 0x9c0 <vfprintf+0x74>
 9b2:	93 fd       	sbrc	r25, 3
 9b4:	85 91       	lpm	r24, Z+
 9b6:	93 ff       	sbrs	r25, 3
 9b8:	81 91       	ld	r24, Z+
 9ba:	6f 01       	movw	r12, r30
 9bc:	85 32       	cpi	r24, 0x25	; 37
 9be:	21 f4       	brne	.+8      	; 0x9c8 <vfprintf+0x7c>
 9c0:	b7 01       	movw	r22, r14
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	c7 d1       	rcall	.+910    	; 0xd54 <fputc>
 9c6:	e8 cf       	rjmp	.-48     	; 0x998 <vfprintf+0x4c>
 9c8:	51 2c       	mov	r5, r1
 9ca:	31 2c       	mov	r3, r1
 9cc:	20 e0       	ldi	r18, 0x00	; 0
 9ce:	20 32       	cpi	r18, 0x20	; 32
 9d0:	a0 f4       	brcc	.+40     	; 0x9fa <vfprintf+0xae>
 9d2:	8b 32       	cpi	r24, 0x2B	; 43
 9d4:	69 f0       	breq	.+26     	; 0x9f0 <vfprintf+0xa4>
 9d6:	30 f4       	brcc	.+12     	; 0x9e4 <vfprintf+0x98>
 9d8:	80 32       	cpi	r24, 0x20	; 32
 9da:	59 f0       	breq	.+22     	; 0x9f2 <vfprintf+0xa6>
 9dc:	83 32       	cpi	r24, 0x23	; 35
 9de:	69 f4       	brne	.+26     	; 0x9fa <vfprintf+0xae>
 9e0:	20 61       	ori	r18, 0x10	; 16
 9e2:	2c c0       	rjmp	.+88     	; 0xa3c <vfprintf+0xf0>
 9e4:	8d 32       	cpi	r24, 0x2D	; 45
 9e6:	39 f0       	breq	.+14     	; 0x9f6 <vfprintf+0xaa>
 9e8:	80 33       	cpi	r24, 0x30	; 48
 9ea:	39 f4       	brne	.+14     	; 0x9fa <vfprintf+0xae>
 9ec:	21 60       	ori	r18, 0x01	; 1
 9ee:	26 c0       	rjmp	.+76     	; 0xa3c <vfprintf+0xf0>
 9f0:	22 60       	ori	r18, 0x02	; 2
 9f2:	24 60       	ori	r18, 0x04	; 4
 9f4:	23 c0       	rjmp	.+70     	; 0xa3c <vfprintf+0xf0>
 9f6:	28 60       	ori	r18, 0x08	; 8
 9f8:	21 c0       	rjmp	.+66     	; 0xa3c <vfprintf+0xf0>
 9fa:	27 fd       	sbrc	r18, 7
 9fc:	27 c0       	rjmp	.+78     	; 0xa4c <vfprintf+0x100>
 9fe:	30 ed       	ldi	r19, 0xD0	; 208
 a00:	38 0f       	add	r19, r24
 a02:	3a 30       	cpi	r19, 0x0A	; 10
 a04:	78 f4       	brcc	.+30     	; 0xa24 <vfprintf+0xd8>
 a06:	26 ff       	sbrs	r18, 6
 a08:	06 c0       	rjmp	.+12     	; 0xa16 <vfprintf+0xca>
 a0a:	fa e0       	ldi	r31, 0x0A	; 10
 a0c:	5f 9e       	mul	r5, r31
 a0e:	30 0d       	add	r19, r0
 a10:	11 24       	eor	r1, r1
 a12:	53 2e       	mov	r5, r19
 a14:	13 c0       	rjmp	.+38     	; 0xa3c <vfprintf+0xf0>
 a16:	8a e0       	ldi	r24, 0x0A	; 10
 a18:	38 9e       	mul	r3, r24
 a1a:	30 0d       	add	r19, r0
 a1c:	11 24       	eor	r1, r1
 a1e:	33 2e       	mov	r3, r19
 a20:	20 62       	ori	r18, 0x20	; 32
 a22:	0c c0       	rjmp	.+24     	; 0xa3c <vfprintf+0xf0>
 a24:	8e 32       	cpi	r24, 0x2E	; 46
 a26:	21 f4       	brne	.+8      	; 0xa30 <vfprintf+0xe4>
 a28:	26 fd       	sbrc	r18, 6
 a2a:	5f c1       	rjmp	.+702    	; 0xcea <vfprintf+0x39e>
 a2c:	20 64       	ori	r18, 0x40	; 64
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <vfprintf+0xf0>
 a30:	8c 36       	cpi	r24, 0x6C	; 108
 a32:	11 f4       	brne	.+4      	; 0xa38 <vfprintf+0xec>
 a34:	20 68       	ori	r18, 0x80	; 128
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <vfprintf+0xf0>
 a38:	88 36       	cpi	r24, 0x68	; 104
 a3a:	41 f4       	brne	.+16     	; 0xa4c <vfprintf+0x100>
 a3c:	f6 01       	movw	r30, r12
 a3e:	93 fd       	sbrc	r25, 3
 a40:	85 91       	lpm	r24, Z+
 a42:	93 ff       	sbrs	r25, 3
 a44:	81 91       	ld	r24, Z+
 a46:	6f 01       	movw	r12, r30
 a48:	81 11       	cpse	r24, r1
 a4a:	c1 cf       	rjmp	.-126    	; 0x9ce <vfprintf+0x82>
 a4c:	98 2f       	mov	r25, r24
 a4e:	9f 7d       	andi	r25, 0xDF	; 223
 a50:	95 54       	subi	r25, 0x45	; 69
 a52:	93 30       	cpi	r25, 0x03	; 3
 a54:	28 f4       	brcc	.+10     	; 0xa60 <vfprintf+0x114>
 a56:	0c 5f       	subi	r16, 0xFC	; 252
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	ff e3       	ldi	r31, 0x3F	; 63
 a5c:	f9 83       	std	Y+1, r31	; 0x01
 a5e:	0d c0       	rjmp	.+26     	; 0xa7a <vfprintf+0x12e>
 a60:	83 36       	cpi	r24, 0x63	; 99
 a62:	31 f0       	breq	.+12     	; 0xa70 <vfprintf+0x124>
 a64:	83 37       	cpi	r24, 0x73	; 115
 a66:	71 f0       	breq	.+28     	; 0xa84 <vfprintf+0x138>
 a68:	83 35       	cpi	r24, 0x53	; 83
 a6a:	09 f0       	breq	.+2      	; 0xa6e <vfprintf+0x122>
 a6c:	57 c0       	rjmp	.+174    	; 0xb1c <vfprintf+0x1d0>
 a6e:	21 c0       	rjmp	.+66     	; 0xab2 <vfprintf+0x166>
 a70:	f8 01       	movw	r30, r16
 a72:	80 81       	ld	r24, Z
 a74:	89 83       	std	Y+1, r24	; 0x01
 a76:	0e 5f       	subi	r16, 0xFE	; 254
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	44 24       	eor	r4, r4
 a7c:	43 94       	inc	r4
 a7e:	51 2c       	mov	r5, r1
 a80:	54 01       	movw	r10, r8
 a82:	14 c0       	rjmp	.+40     	; 0xaac <vfprintf+0x160>
 a84:	38 01       	movw	r6, r16
 a86:	f2 e0       	ldi	r31, 0x02	; 2
 a88:	6f 0e       	add	r6, r31
 a8a:	71 1c       	adc	r7, r1
 a8c:	f8 01       	movw	r30, r16
 a8e:	a0 80       	ld	r10, Z
 a90:	b1 80       	ldd	r11, Z+1	; 0x01
 a92:	26 ff       	sbrs	r18, 6
 a94:	03 c0       	rjmp	.+6      	; 0xa9c <vfprintf+0x150>
 a96:	65 2d       	mov	r22, r5
 a98:	70 e0       	ldi	r23, 0x00	; 0
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <vfprintf+0x154>
 a9c:	6f ef       	ldi	r22, 0xFF	; 255
 a9e:	7f ef       	ldi	r23, 0xFF	; 255
 aa0:	c5 01       	movw	r24, r10
 aa2:	2c 87       	std	Y+12, r18	; 0x0c
 aa4:	4c d1       	rcall	.+664    	; 0xd3e <strnlen>
 aa6:	2c 01       	movw	r4, r24
 aa8:	83 01       	movw	r16, r6
 aaa:	2c 85       	ldd	r18, Y+12	; 0x0c
 aac:	2f 77       	andi	r18, 0x7F	; 127
 aae:	22 2e       	mov	r2, r18
 ab0:	16 c0       	rjmp	.+44     	; 0xade <vfprintf+0x192>
 ab2:	38 01       	movw	r6, r16
 ab4:	f2 e0       	ldi	r31, 0x02	; 2
 ab6:	6f 0e       	add	r6, r31
 ab8:	71 1c       	adc	r7, r1
 aba:	f8 01       	movw	r30, r16
 abc:	a0 80       	ld	r10, Z
 abe:	b1 80       	ldd	r11, Z+1	; 0x01
 ac0:	26 ff       	sbrs	r18, 6
 ac2:	03 c0       	rjmp	.+6      	; 0xaca <vfprintf+0x17e>
 ac4:	65 2d       	mov	r22, r5
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	02 c0       	rjmp	.+4      	; 0xace <vfprintf+0x182>
 aca:	6f ef       	ldi	r22, 0xFF	; 255
 acc:	7f ef       	ldi	r23, 0xFF	; 255
 ace:	c5 01       	movw	r24, r10
 ad0:	2c 87       	std	Y+12, r18	; 0x0c
 ad2:	2a d1       	rcall	.+596    	; 0xd28 <strnlen_P>
 ad4:	2c 01       	movw	r4, r24
 ad6:	2c 85       	ldd	r18, Y+12	; 0x0c
 ad8:	20 68       	ori	r18, 0x80	; 128
 ada:	22 2e       	mov	r2, r18
 adc:	83 01       	movw	r16, r6
 ade:	23 fc       	sbrc	r2, 3
 ae0:	19 c0       	rjmp	.+50     	; 0xb14 <vfprintf+0x1c8>
 ae2:	83 2d       	mov	r24, r3
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	48 16       	cp	r4, r24
 ae8:	59 06       	cpc	r5, r25
 aea:	a0 f4       	brcc	.+40     	; 0xb14 <vfprintf+0x1c8>
 aec:	b7 01       	movw	r22, r14
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	30 d1       	rcall	.+608    	; 0xd54 <fputc>
 af4:	3a 94       	dec	r3
 af6:	f5 cf       	rjmp	.-22     	; 0xae2 <vfprintf+0x196>
 af8:	f5 01       	movw	r30, r10
 afa:	27 fc       	sbrc	r2, 7
 afc:	85 91       	lpm	r24, Z+
 afe:	27 fe       	sbrs	r2, 7
 b00:	81 91       	ld	r24, Z+
 b02:	5f 01       	movw	r10, r30
 b04:	b7 01       	movw	r22, r14
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	25 d1       	rcall	.+586    	; 0xd54 <fputc>
 b0a:	31 10       	cpse	r3, r1
 b0c:	3a 94       	dec	r3
 b0e:	f1 e0       	ldi	r31, 0x01	; 1
 b10:	4f 1a       	sub	r4, r31
 b12:	51 08       	sbc	r5, r1
 b14:	41 14       	cp	r4, r1
 b16:	51 04       	cpc	r5, r1
 b18:	79 f7       	brne	.-34     	; 0xaf8 <vfprintf+0x1ac>
 b1a:	de c0       	rjmp	.+444    	; 0xcd8 <vfprintf+0x38c>
 b1c:	84 36       	cpi	r24, 0x64	; 100
 b1e:	11 f0       	breq	.+4      	; 0xb24 <vfprintf+0x1d8>
 b20:	89 36       	cpi	r24, 0x69	; 105
 b22:	31 f5       	brne	.+76     	; 0xb70 <vfprintf+0x224>
 b24:	f8 01       	movw	r30, r16
 b26:	27 ff       	sbrs	r18, 7
 b28:	07 c0       	rjmp	.+14     	; 0xb38 <vfprintf+0x1ec>
 b2a:	60 81       	ld	r22, Z
 b2c:	71 81       	ldd	r23, Z+1	; 0x01
 b2e:	82 81       	ldd	r24, Z+2	; 0x02
 b30:	93 81       	ldd	r25, Z+3	; 0x03
 b32:	0c 5f       	subi	r16, 0xFC	; 252
 b34:	1f 4f       	sbci	r17, 0xFF	; 255
 b36:	08 c0       	rjmp	.+16     	; 0xb48 <vfprintf+0x1fc>
 b38:	60 81       	ld	r22, Z
 b3a:	71 81       	ldd	r23, Z+1	; 0x01
 b3c:	07 2e       	mov	r0, r23
 b3e:	00 0c       	add	r0, r0
 b40:	88 0b       	sbc	r24, r24
 b42:	99 0b       	sbc	r25, r25
 b44:	0e 5f       	subi	r16, 0xFE	; 254
 b46:	1f 4f       	sbci	r17, 0xFF	; 255
 b48:	2f 76       	andi	r18, 0x6F	; 111
 b4a:	72 2e       	mov	r7, r18
 b4c:	97 ff       	sbrs	r25, 7
 b4e:	09 c0       	rjmp	.+18     	; 0xb62 <vfprintf+0x216>
 b50:	90 95       	com	r25
 b52:	80 95       	com	r24
 b54:	70 95       	com	r23
 b56:	61 95       	neg	r22
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	20 68       	ori	r18, 0x80	; 128
 b60:	72 2e       	mov	r7, r18
 b62:	2a e0       	ldi	r18, 0x0A	; 10
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	a4 01       	movw	r20, r8
 b68:	2d d1       	rcall	.+602    	; 0xdc4 <__ultoa_invert>
 b6a:	a8 2e       	mov	r10, r24
 b6c:	a8 18       	sub	r10, r8
 b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <vfprintf+0x2aa>
 b70:	85 37       	cpi	r24, 0x75	; 117
 b72:	29 f4       	brne	.+10     	; 0xb7e <vfprintf+0x232>
 b74:	2f 7e       	andi	r18, 0xEF	; 239
 b76:	b2 2e       	mov	r11, r18
 b78:	2a e0       	ldi	r18, 0x0A	; 10
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	25 c0       	rjmp	.+74     	; 0xbc8 <vfprintf+0x27c>
 b7e:	f2 2f       	mov	r31, r18
 b80:	f9 7f       	andi	r31, 0xF9	; 249
 b82:	bf 2e       	mov	r11, r31
 b84:	8f 36       	cpi	r24, 0x6F	; 111
 b86:	c1 f0       	breq	.+48     	; 0xbb8 <vfprintf+0x26c>
 b88:	18 f4       	brcc	.+6      	; 0xb90 <vfprintf+0x244>
 b8a:	88 35       	cpi	r24, 0x58	; 88
 b8c:	79 f0       	breq	.+30     	; 0xbac <vfprintf+0x260>
 b8e:	ad c0       	rjmp	.+346    	; 0xcea <vfprintf+0x39e>
 b90:	80 37       	cpi	r24, 0x70	; 112
 b92:	19 f0       	breq	.+6      	; 0xb9a <vfprintf+0x24e>
 b94:	88 37       	cpi	r24, 0x78	; 120
 b96:	21 f0       	breq	.+8      	; 0xba0 <vfprintf+0x254>
 b98:	a8 c0       	rjmp	.+336    	; 0xcea <vfprintf+0x39e>
 b9a:	2f 2f       	mov	r18, r31
 b9c:	20 61       	ori	r18, 0x10	; 16
 b9e:	b2 2e       	mov	r11, r18
 ba0:	b4 fe       	sbrs	r11, 4
 ba2:	0d c0       	rjmp	.+26     	; 0xbbe <vfprintf+0x272>
 ba4:	8b 2d       	mov	r24, r11
 ba6:	84 60       	ori	r24, 0x04	; 4
 ba8:	b8 2e       	mov	r11, r24
 baa:	09 c0       	rjmp	.+18     	; 0xbbe <vfprintf+0x272>
 bac:	24 ff       	sbrs	r18, 4
 bae:	0a c0       	rjmp	.+20     	; 0xbc4 <vfprintf+0x278>
 bb0:	9f 2f       	mov	r25, r31
 bb2:	96 60       	ori	r25, 0x06	; 6
 bb4:	b9 2e       	mov	r11, r25
 bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <vfprintf+0x278>
 bb8:	28 e0       	ldi	r18, 0x08	; 8
 bba:	30 e0       	ldi	r19, 0x00	; 0
 bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <vfprintf+0x27c>
 bbe:	20 e1       	ldi	r18, 0x10	; 16
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <vfprintf+0x27c>
 bc4:	20 e1       	ldi	r18, 0x10	; 16
 bc6:	32 e0       	ldi	r19, 0x02	; 2
 bc8:	f8 01       	movw	r30, r16
 bca:	b7 fe       	sbrs	r11, 7
 bcc:	07 c0       	rjmp	.+14     	; 0xbdc <vfprintf+0x290>
 bce:	60 81       	ld	r22, Z
 bd0:	71 81       	ldd	r23, Z+1	; 0x01
 bd2:	82 81       	ldd	r24, Z+2	; 0x02
 bd4:	93 81       	ldd	r25, Z+3	; 0x03
 bd6:	0c 5f       	subi	r16, 0xFC	; 252
 bd8:	1f 4f       	sbci	r17, 0xFF	; 255
 bda:	06 c0       	rjmp	.+12     	; 0xbe8 <vfprintf+0x29c>
 bdc:	60 81       	ld	r22, Z
 bde:	71 81       	ldd	r23, Z+1	; 0x01
 be0:	80 e0       	ldi	r24, 0x00	; 0
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	0e 5f       	subi	r16, 0xFE	; 254
 be6:	1f 4f       	sbci	r17, 0xFF	; 255
 be8:	a4 01       	movw	r20, r8
 bea:	ec d0       	rcall	.+472    	; 0xdc4 <__ultoa_invert>
 bec:	a8 2e       	mov	r10, r24
 bee:	a8 18       	sub	r10, r8
 bf0:	fb 2d       	mov	r31, r11
 bf2:	ff 77       	andi	r31, 0x7F	; 127
 bf4:	7f 2e       	mov	r7, r31
 bf6:	76 fe       	sbrs	r7, 6
 bf8:	0b c0       	rjmp	.+22     	; 0xc10 <vfprintf+0x2c4>
 bfa:	37 2d       	mov	r19, r7
 bfc:	3e 7f       	andi	r19, 0xFE	; 254
 bfe:	a5 14       	cp	r10, r5
 c00:	50 f4       	brcc	.+20     	; 0xc16 <vfprintf+0x2ca>
 c02:	74 fe       	sbrs	r7, 4
 c04:	0a c0       	rjmp	.+20     	; 0xc1a <vfprintf+0x2ce>
 c06:	72 fc       	sbrc	r7, 2
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <vfprintf+0x2ce>
 c0a:	37 2d       	mov	r19, r7
 c0c:	3e 7e       	andi	r19, 0xEE	; 238
 c0e:	05 c0       	rjmp	.+10     	; 0xc1a <vfprintf+0x2ce>
 c10:	ba 2c       	mov	r11, r10
 c12:	37 2d       	mov	r19, r7
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <vfprintf+0x2d0>
 c16:	ba 2c       	mov	r11, r10
 c18:	01 c0       	rjmp	.+2      	; 0xc1c <vfprintf+0x2d0>
 c1a:	b5 2c       	mov	r11, r5
 c1c:	34 ff       	sbrs	r19, 4
 c1e:	0d c0       	rjmp	.+26     	; 0xc3a <vfprintf+0x2ee>
 c20:	fe 01       	movw	r30, r28
 c22:	ea 0d       	add	r30, r10
 c24:	f1 1d       	adc	r31, r1
 c26:	80 81       	ld	r24, Z
 c28:	80 33       	cpi	r24, 0x30	; 48
 c2a:	11 f4       	brne	.+4      	; 0xc30 <vfprintf+0x2e4>
 c2c:	39 7e       	andi	r19, 0xE9	; 233
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <vfprintf+0x2f6>
 c30:	32 ff       	sbrs	r19, 2
 c32:	06 c0       	rjmp	.+12     	; 0xc40 <vfprintf+0x2f4>
 c34:	b3 94       	inc	r11
 c36:	b3 94       	inc	r11
 c38:	04 c0       	rjmp	.+8      	; 0xc42 <vfprintf+0x2f6>
 c3a:	83 2f       	mov	r24, r19
 c3c:	86 78       	andi	r24, 0x86	; 134
 c3e:	09 f0       	breq	.+2      	; 0xc42 <vfprintf+0x2f6>
 c40:	b3 94       	inc	r11
 c42:	33 fd       	sbrc	r19, 3
 c44:	12 c0       	rjmp	.+36     	; 0xc6a <vfprintf+0x31e>
 c46:	30 ff       	sbrs	r19, 0
 c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x30a>
 c4a:	5a 2c       	mov	r5, r10
 c4c:	b3 14       	cp	r11, r3
 c4e:	18 f4       	brcc	.+6      	; 0xc56 <vfprintf+0x30a>
 c50:	53 0c       	add	r5, r3
 c52:	5b 18       	sub	r5, r11
 c54:	b3 2c       	mov	r11, r3
 c56:	b3 14       	cp	r11, r3
 c58:	60 f4       	brcc	.+24     	; 0xc72 <vfprintf+0x326>
 c5a:	b7 01       	movw	r22, r14
 c5c:	80 e2       	ldi	r24, 0x20	; 32
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	3c 87       	std	Y+12, r19	; 0x0c
 c62:	78 d0       	rcall	.+240    	; 0xd54 <fputc>
 c64:	b3 94       	inc	r11
 c66:	3c 85       	ldd	r19, Y+12	; 0x0c
 c68:	f6 cf       	rjmp	.-20     	; 0xc56 <vfprintf+0x30a>
 c6a:	b3 14       	cp	r11, r3
 c6c:	10 f4       	brcc	.+4      	; 0xc72 <vfprintf+0x326>
 c6e:	3b 18       	sub	r3, r11
 c70:	01 c0       	rjmp	.+2      	; 0xc74 <vfprintf+0x328>
 c72:	31 2c       	mov	r3, r1
 c74:	34 ff       	sbrs	r19, 4
 c76:	11 c0       	rjmp	.+34     	; 0xc9a <vfprintf+0x34e>
 c78:	b7 01       	movw	r22, r14
 c7a:	80 e3       	ldi	r24, 0x30	; 48
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	3c 87       	std	Y+12, r19	; 0x0c
 c80:	69 d0       	rcall	.+210    	; 0xd54 <fputc>
 c82:	3c 85       	ldd	r19, Y+12	; 0x0c
 c84:	32 ff       	sbrs	r19, 2
 c86:	16 c0       	rjmp	.+44     	; 0xcb4 <vfprintf+0x368>
 c88:	31 fd       	sbrc	r19, 1
 c8a:	03 c0       	rjmp	.+6      	; 0xc92 <vfprintf+0x346>
 c8c:	88 e7       	ldi	r24, 0x78	; 120
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <vfprintf+0x34a>
 c92:	88 e5       	ldi	r24, 0x58	; 88
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	b7 01       	movw	r22, r14
 c98:	0c c0       	rjmp	.+24     	; 0xcb2 <vfprintf+0x366>
 c9a:	83 2f       	mov	r24, r19
 c9c:	86 78       	andi	r24, 0x86	; 134
 c9e:	51 f0       	breq	.+20     	; 0xcb4 <vfprintf+0x368>
 ca0:	31 ff       	sbrs	r19, 1
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <vfprintf+0x35c>
 ca4:	8b e2       	ldi	r24, 0x2B	; 43
 ca6:	01 c0       	rjmp	.+2      	; 0xcaa <vfprintf+0x35e>
 ca8:	80 e2       	ldi	r24, 0x20	; 32
 caa:	37 fd       	sbrc	r19, 7
 cac:	8d e2       	ldi	r24, 0x2D	; 45
 cae:	b7 01       	movw	r22, r14
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	50 d0       	rcall	.+160    	; 0xd54 <fputc>
 cb4:	a5 14       	cp	r10, r5
 cb6:	30 f4       	brcc	.+12     	; 0xcc4 <vfprintf+0x378>
 cb8:	b7 01       	movw	r22, r14
 cba:	80 e3       	ldi	r24, 0x30	; 48
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	4a d0       	rcall	.+148    	; 0xd54 <fputc>
 cc0:	5a 94       	dec	r5
 cc2:	f8 cf       	rjmp	.-16     	; 0xcb4 <vfprintf+0x368>
 cc4:	aa 94       	dec	r10
 cc6:	f4 01       	movw	r30, r8
 cc8:	ea 0d       	add	r30, r10
 cca:	f1 1d       	adc	r31, r1
 ccc:	80 81       	ld	r24, Z
 cce:	b7 01       	movw	r22, r14
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	40 d0       	rcall	.+128    	; 0xd54 <fputc>
 cd4:	a1 10       	cpse	r10, r1
 cd6:	f6 cf       	rjmp	.-20     	; 0xcc4 <vfprintf+0x378>
 cd8:	33 20       	and	r3, r3
 cda:	09 f4       	brne	.+2      	; 0xcde <vfprintf+0x392>
 cdc:	5d ce       	rjmp	.-838    	; 0x998 <vfprintf+0x4c>
 cde:	b7 01       	movw	r22, r14
 ce0:	80 e2       	ldi	r24, 0x20	; 32
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	37 d0       	rcall	.+110    	; 0xd54 <fputc>
 ce6:	3a 94       	dec	r3
 ce8:	f7 cf       	rjmp	.-18     	; 0xcd8 <vfprintf+0x38c>
 cea:	f7 01       	movw	r30, r14
 cec:	86 81       	ldd	r24, Z+6	; 0x06
 cee:	97 81       	ldd	r25, Z+7	; 0x07
 cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <vfprintf+0x3aa>
 cf2:	8f ef       	ldi	r24, 0xFF	; 255
 cf4:	9f ef       	ldi	r25, 0xFF	; 255
 cf6:	2c 96       	adiw	r28, 0x0c	; 12
 cf8:	0f b6       	in	r0, 0x3f	; 63
 cfa:	f8 94       	cli
 cfc:	de bf       	out	0x3e, r29	; 62
 cfe:	0f be       	out	0x3f, r0	; 63
 d00:	cd bf       	out	0x3d, r28	; 61
 d02:	df 91       	pop	r29
 d04:	cf 91       	pop	r28
 d06:	1f 91       	pop	r17
 d08:	0f 91       	pop	r16
 d0a:	ff 90       	pop	r15
 d0c:	ef 90       	pop	r14
 d0e:	df 90       	pop	r13
 d10:	cf 90       	pop	r12
 d12:	bf 90       	pop	r11
 d14:	af 90       	pop	r10
 d16:	9f 90       	pop	r9
 d18:	8f 90       	pop	r8
 d1a:	7f 90       	pop	r7
 d1c:	6f 90       	pop	r6
 d1e:	5f 90       	pop	r5
 d20:	4f 90       	pop	r4
 d22:	3f 90       	pop	r3
 d24:	2f 90       	pop	r2
 d26:	08 95       	ret

00000d28 <strnlen_P>:
 d28:	fc 01       	movw	r30, r24
 d2a:	05 90       	lpm	r0, Z+
 d2c:	61 50       	subi	r22, 0x01	; 1
 d2e:	70 40       	sbci	r23, 0x00	; 0
 d30:	01 10       	cpse	r0, r1
 d32:	d8 f7       	brcc	.-10     	; 0xd2a <strnlen_P+0x2>
 d34:	80 95       	com	r24
 d36:	90 95       	com	r25
 d38:	8e 0f       	add	r24, r30
 d3a:	9f 1f       	adc	r25, r31
 d3c:	08 95       	ret

00000d3e <strnlen>:
 d3e:	fc 01       	movw	r30, r24
 d40:	61 50       	subi	r22, 0x01	; 1
 d42:	70 40       	sbci	r23, 0x00	; 0
 d44:	01 90       	ld	r0, Z+
 d46:	01 10       	cpse	r0, r1
 d48:	d8 f7       	brcc	.-10     	; 0xd40 <strnlen+0x2>
 d4a:	80 95       	com	r24
 d4c:	90 95       	com	r25
 d4e:	8e 0f       	add	r24, r30
 d50:	9f 1f       	adc	r25, r31
 d52:	08 95       	ret

00000d54 <fputc>:
 d54:	0f 93       	push	r16
 d56:	1f 93       	push	r17
 d58:	cf 93       	push	r28
 d5a:	df 93       	push	r29
 d5c:	fb 01       	movw	r30, r22
 d5e:	23 81       	ldd	r18, Z+3	; 0x03
 d60:	21 fd       	sbrc	r18, 1
 d62:	03 c0       	rjmp	.+6      	; 0xd6a <fputc+0x16>
 d64:	8f ef       	ldi	r24, 0xFF	; 255
 d66:	9f ef       	ldi	r25, 0xFF	; 255
 d68:	28 c0       	rjmp	.+80     	; 0xdba <fputc+0x66>
 d6a:	22 ff       	sbrs	r18, 2
 d6c:	16 c0       	rjmp	.+44     	; 0xd9a <fputc+0x46>
 d6e:	46 81       	ldd	r20, Z+6	; 0x06
 d70:	57 81       	ldd	r21, Z+7	; 0x07
 d72:	24 81       	ldd	r18, Z+4	; 0x04
 d74:	35 81       	ldd	r19, Z+5	; 0x05
 d76:	42 17       	cp	r20, r18
 d78:	53 07       	cpc	r21, r19
 d7a:	44 f4       	brge	.+16     	; 0xd8c <fputc+0x38>
 d7c:	a0 81       	ld	r26, Z
 d7e:	b1 81       	ldd	r27, Z+1	; 0x01
 d80:	9d 01       	movw	r18, r26
 d82:	2f 5f       	subi	r18, 0xFF	; 255
 d84:	3f 4f       	sbci	r19, 0xFF	; 255
 d86:	31 83       	std	Z+1, r19	; 0x01
 d88:	20 83       	st	Z, r18
 d8a:	8c 93       	st	X, r24
 d8c:	26 81       	ldd	r18, Z+6	; 0x06
 d8e:	37 81       	ldd	r19, Z+7	; 0x07
 d90:	2f 5f       	subi	r18, 0xFF	; 255
 d92:	3f 4f       	sbci	r19, 0xFF	; 255
 d94:	37 83       	std	Z+7, r19	; 0x07
 d96:	26 83       	std	Z+6, r18	; 0x06
 d98:	10 c0       	rjmp	.+32     	; 0xdba <fputc+0x66>
 d9a:	eb 01       	movw	r28, r22
 d9c:	09 2f       	mov	r16, r25
 d9e:	18 2f       	mov	r17, r24
 da0:	00 84       	ldd	r0, Z+8	; 0x08
 da2:	f1 85       	ldd	r31, Z+9	; 0x09
 da4:	e0 2d       	mov	r30, r0
 da6:	19 95       	eicall
 da8:	89 2b       	or	r24, r25
 daa:	e1 f6       	brne	.-72     	; 0xd64 <fputc+0x10>
 dac:	8e 81       	ldd	r24, Y+6	; 0x06
 dae:	9f 81       	ldd	r25, Y+7	; 0x07
 db0:	01 96       	adiw	r24, 0x01	; 1
 db2:	9f 83       	std	Y+7, r25	; 0x07
 db4:	8e 83       	std	Y+6, r24	; 0x06
 db6:	81 2f       	mov	r24, r17
 db8:	90 2f       	mov	r25, r16
 dba:	df 91       	pop	r29
 dbc:	cf 91       	pop	r28
 dbe:	1f 91       	pop	r17
 dc0:	0f 91       	pop	r16
 dc2:	08 95       	ret

00000dc4 <__ultoa_invert>:
 dc4:	fa 01       	movw	r30, r20
 dc6:	aa 27       	eor	r26, r26
 dc8:	28 30       	cpi	r18, 0x08	; 8
 dca:	51 f1       	breq	.+84     	; 0xe20 <__ultoa_invert+0x5c>
 dcc:	20 31       	cpi	r18, 0x10	; 16
 dce:	81 f1       	breq	.+96     	; 0xe30 <__ultoa_invert+0x6c>
 dd0:	e8 94       	clt
 dd2:	6f 93       	push	r22
 dd4:	6e 7f       	andi	r22, 0xFE	; 254
 dd6:	6e 5f       	subi	r22, 0xFE	; 254
 dd8:	7f 4f       	sbci	r23, 0xFF	; 255
 dda:	8f 4f       	sbci	r24, 0xFF	; 255
 ddc:	9f 4f       	sbci	r25, 0xFF	; 255
 dde:	af 4f       	sbci	r26, 0xFF	; 255
 de0:	b1 e0       	ldi	r27, 0x01	; 1
 de2:	3e d0       	rcall	.+124    	; 0xe60 <__ultoa_invert+0x9c>
 de4:	b4 e0       	ldi	r27, 0x04	; 4
 de6:	3c d0       	rcall	.+120    	; 0xe60 <__ultoa_invert+0x9c>
 de8:	67 0f       	add	r22, r23
 dea:	78 1f       	adc	r23, r24
 dec:	89 1f       	adc	r24, r25
 dee:	9a 1f       	adc	r25, r26
 df0:	a1 1d       	adc	r26, r1
 df2:	68 0f       	add	r22, r24
 df4:	79 1f       	adc	r23, r25
 df6:	8a 1f       	adc	r24, r26
 df8:	91 1d       	adc	r25, r1
 dfa:	a1 1d       	adc	r26, r1
 dfc:	6a 0f       	add	r22, r26
 dfe:	71 1d       	adc	r23, r1
 e00:	81 1d       	adc	r24, r1
 e02:	91 1d       	adc	r25, r1
 e04:	a1 1d       	adc	r26, r1
 e06:	20 d0       	rcall	.+64     	; 0xe48 <__ultoa_invert+0x84>
 e08:	09 f4       	brne	.+2      	; 0xe0c <__ultoa_invert+0x48>
 e0a:	68 94       	set
 e0c:	3f 91       	pop	r19
 e0e:	2a e0       	ldi	r18, 0x0A	; 10
 e10:	26 9f       	mul	r18, r22
 e12:	11 24       	eor	r1, r1
 e14:	30 19       	sub	r19, r0
 e16:	30 5d       	subi	r19, 0xD0	; 208
 e18:	31 93       	st	Z+, r19
 e1a:	de f6       	brtc	.-74     	; 0xdd2 <__ultoa_invert+0xe>
 e1c:	cf 01       	movw	r24, r30
 e1e:	08 95       	ret
 e20:	46 2f       	mov	r20, r22
 e22:	47 70       	andi	r20, 0x07	; 7
 e24:	40 5d       	subi	r20, 0xD0	; 208
 e26:	41 93       	st	Z+, r20
 e28:	b3 e0       	ldi	r27, 0x03	; 3
 e2a:	0f d0       	rcall	.+30     	; 0xe4a <__ultoa_invert+0x86>
 e2c:	c9 f7       	brne	.-14     	; 0xe20 <__ultoa_invert+0x5c>
 e2e:	f6 cf       	rjmp	.-20     	; 0xe1c <__ultoa_invert+0x58>
 e30:	46 2f       	mov	r20, r22
 e32:	4f 70       	andi	r20, 0x0F	; 15
 e34:	40 5d       	subi	r20, 0xD0	; 208
 e36:	4a 33       	cpi	r20, 0x3A	; 58
 e38:	18 f0       	brcs	.+6      	; 0xe40 <__ultoa_invert+0x7c>
 e3a:	49 5d       	subi	r20, 0xD9	; 217
 e3c:	31 fd       	sbrc	r19, 1
 e3e:	40 52       	subi	r20, 0x20	; 32
 e40:	41 93       	st	Z+, r20
 e42:	02 d0       	rcall	.+4      	; 0xe48 <__ultoa_invert+0x84>
 e44:	a9 f7       	brne	.-22     	; 0xe30 <__ultoa_invert+0x6c>
 e46:	ea cf       	rjmp	.-44     	; 0xe1c <__ultoa_invert+0x58>
 e48:	b4 e0       	ldi	r27, 0x04	; 4
 e4a:	a6 95       	lsr	r26
 e4c:	97 95       	ror	r25
 e4e:	87 95       	ror	r24
 e50:	77 95       	ror	r23
 e52:	67 95       	ror	r22
 e54:	ba 95       	dec	r27
 e56:	c9 f7       	brne	.-14     	; 0xe4a <__ultoa_invert+0x86>
 e58:	00 97       	sbiw	r24, 0x00	; 0
 e5a:	61 05       	cpc	r22, r1
 e5c:	71 05       	cpc	r23, r1
 e5e:	08 95       	ret
 e60:	9b 01       	movw	r18, r22
 e62:	ac 01       	movw	r20, r24
 e64:	0a 2e       	mov	r0, r26
 e66:	06 94       	lsr	r0
 e68:	57 95       	ror	r21
 e6a:	47 95       	ror	r20
 e6c:	37 95       	ror	r19
 e6e:	27 95       	ror	r18
 e70:	ba 95       	dec	r27
 e72:	c9 f7       	brne	.-14     	; 0xe66 <__ultoa_invert+0xa2>
 e74:	62 0f       	add	r22, r18
 e76:	73 1f       	adc	r23, r19
 e78:	84 1f       	adc	r24, r20
 e7a:	95 1f       	adc	r25, r21
 e7c:	a0 1d       	adc	r26, r0
 e7e:	08 95       	ret

00000e80 <_exit>:
 e80:	f8 94       	cli

00000e82 <__stop_program>:
 e82:	ff cf       	rjmp	.-2      	; 0xe82 <__stop_program>
